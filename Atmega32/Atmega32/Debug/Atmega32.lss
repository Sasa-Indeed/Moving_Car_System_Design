
Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000023ae  00002442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  0080007c  0080007c  0000245e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000245e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001940  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9b  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154e  00000000  00000000  00004cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  00006208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a13  00000000  00000000  00006998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f9f  00000000  00000000  000073ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000834a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__ctors_end>
       4:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_1>
       8:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_2>
       c:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__vector_3>
      10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      14:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <__vector_5>
      18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      24:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_9>
      28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      2c:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_11>
      30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
      54:	2c 04       	cpc	r2, r12
      56:	2e 04       	cpc	r2, r14
      58:	31 04       	cpc	r3, r1
      5a:	34 04       	cpc	r3, r4
      5c:	37 04       	cpc	r3, r7
      5e:	37 04       	cpc	r3, r7
      60:	37 04       	cpc	r3, r7
      62:	37 04       	cpc	r3, r7
      64:	37 04       	cpc	r3, r7
      66:	37 04       	cpc	r3, r7
      68:	37 04       	cpc	r3, r7
      6a:	37 04       	cpc	r3, r7
      6c:	37 04       	cpc	r3, r7
      6e:	37 04       	cpc	r3, r7
      70:	37 04       	cpc	r3, r7
      72:	37 04       	cpc	r3, r7
      74:	37 04       	cpc	r3, r7
      76:	37 04       	cpc	r3, r7
      78:	37 04       	cpc	r3, r7
      7a:	37 04       	cpc	r3, r7
      7c:	37 04       	cpc	r3, r7
      7e:	37 04       	cpc	r3, r7
      80:	37 04       	cpc	r3, r7
      82:	37 04       	cpc	r3, r7
      84:	37 04       	cpc	r3, r7
      86:	37 04       	cpc	r3, r7
      88:	37 04       	cpc	r3, r7
      8a:	37 04       	cpc	r3, r7
      8c:	37 04       	cpc	r3, r7
      8e:	37 04       	cpc	r3, r7
      90:	37 04       	cpc	r3, r7
      92:	37 04       	cpc	r3, r7
      94:	2c 04       	cpc	r2, r12
      96:	2e 04       	cpc	r2, r14
      98:	31 04       	cpc	r3, r1
      9a:	34 04       	cpc	r3, r4

0000009c <__ctors_end>:
      9c:	11 24       	eor	r1, r1
      9e:	1f be       	out	0x3f, r1	; 63
      a0:	cf e5       	ldi	r28, 0x5F	; 95
      a2:	d8 e0       	ldi	r29, 0x08	; 8
      a4:	de bf       	out	0x3e, r29	; 62
      a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
      a8:	10 e0       	ldi	r17, 0x00	; 0
      aa:	a0 e6       	ldi	r26, 0x60	; 96
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	ee ea       	ldi	r30, 0xAE	; 174
      b0:	f3 e2       	ldi	r31, 0x23	; 35
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x10>
      b4:	05 90       	lpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ac 37       	cpi	r26, 0x7C	; 124
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0xc>

000000be <__do_clear_bss>:
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	ac e7       	ldi	r26, 0x7C	; 124
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 3b       	cpi	r26, 0xBD	; 189
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	0e 94 04 04 	call	0x808	; 0x808 <main>
      d2:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <_exit>

000000d6 <__bad_interrupt>:
      d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <application_car_moving_system_init>:
void emergency_stop(void);

//--------------------------------
//	 APIs Implementations
//--------------------------------
application_status_t application_car_moving_system_init(void){
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	27 97       	sbiw	r28, 0x07	; 7
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
	timer_config_t config;
	
	config.timerNumber = TIMER_NUMBER_0;
      ee:	19 82       	std	Y+1, r1	; 0x01
	
	config.mode = TIMER_MODE_NORMAL;
      f0:	1a 82       	std	Y+2, r1	; 0x02
	
	config.clkSource = TIMER_CLK_SOURCE_INTERNAL;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	8b 83       	std	Y+3, r24	; 0x03
	
	config.prescaler = TIMER_PRESCALER_8;
      f6:	82 e0       	ldi	r24, 0x02	; 2
      f8:	8c 83       	std	Y+4, r24	; 0x04
	
	config.interruptEnable = TIMER_INTERRUPT_DISABLE;
      fa:	1d 82       	std	Y+5, r1	; 0x05
	
	MCAL_timer_init(&config);
      fc:	ce 01       	movw	r24, r28
      fe:	01 96       	adiw	r24, 0x01	; 1
     100:	0e 94 67 0a 	call	0x14ce	; 0x14ce <MCAL_timer_init>

	ECUAL_motor_init();
     104:	0e 94 44 03 	call	0x688	; 0x688 <ECUAL_motor_init>
	
	ECUAL_motor_move_forward();
     108:	0e 94 84 03 	call	0x708	; 0x708 <ECUAL_motor_move_forward>
	
	ECUAL_led_init(LED_PORTC, PIN_0);
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	83 e4       	ldi	r24, 0x43	; 67
     110:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ECUAL_led_init>
	ECUAL_led_init(LED_PORTC, PIN_1);
     114:	62 e0       	ldi	r22, 0x02	; 2
     116:	83 e4       	ldi	r24, 0x43	; 67
     118:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ECUAL_led_init>
	ECUAL_led_init(LED_PORTC, PIN_2);
     11c:	64 e0       	ldi	r22, 0x04	; 4
     11e:	83 e4       	ldi	r24, 0x43	; 67
     120:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ECUAL_led_init>
	ECUAL_led_init(LED_PORTC, PIN_3);
     124:	68 e0       	ldi	r22, 0x08	; 8
     126:	83 e4       	ldi	r24, 0x43	; 67
     128:	0e 94 dd 02 	call	0x5ba	; 0x5ba <ECUAL_led_init>
	
	ECUAL_button_init(BUTTON_PORTD, PIN_0);
     12c:	61 e0       	ldi	r22, 0x01	; 1
     12e:	84 e4       	ldi	r24, 0x44	; 68
     130:	0e 94 75 02 	call	0x4ea	; 0x4ea <ECUAL_button_init>
	ECUAL_button_init(BUTTON_PORTD, PIN_2);
     134:	64 e0       	ldi	r22, 0x04	; 4
     136:	84 e4       	ldi	r24, 0x44	; 68
     138:	0e 94 75 02 	call	0x4ea	; 0x4ea <ECUAL_button_init>
	
	ECUAL_button_enable_EXTI(EXTI0, emergency_stop, TRIGGER_CASE_RISING_EDGE);
     13c:	43 e0       	ldi	r20, 0x03	; 3
     13e:	61 e6       	ldi	r22, 0x61	; 97
     140:	72 e0       	ldi	r23, 0x02	; 2
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 b3 02 	call	0x566	; 0x566 <ECUAL_button_enable_EXTI>
	
	return APPLICATION_OK;
     148:	80 e0       	ldi	r24, 0x00	; 0
}
     14a:	27 96       	adiw	r28, 0x07	; 7
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <application_car_moving_system>:


void application_car_moving_system(void){
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	
	while(1){
		
		ECUAL_button_read(BUTTON_PORTD, PIN_0, &g_buttonData);
     164:	40 e8       	ldi	r20, 0x80	; 128
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	84 e4       	ldi	r24, 0x44	; 68
     16c:	0e 94 96 02 	call	0x52c	; 0x52c <ECUAL_button_read>
		
		if (g_buttonPresses == 0 && g_buttonData){
     170:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     174:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     178:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     17c:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     180:	89 2b       	or	r24, r25
     182:	8a 2b       	or	r24, r26
     184:	8b 2b       	or	r24, r27
     186:	31 f5       	brne	.+76     	; 0x1d4 <application_car_moving_system+0x78>
     188:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     18c:	88 23       	and	r24, r24
     18e:	11 f1       	breq	.+68     	; 0x1d4 <application_car_moving_system+0x78>
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
     190:	41 e0       	ldi	r20, 0x01	; 1
     192:	64 e0       	ldi	r22, 0x04	; 4
     194:	83 e4       	ldi	r24, 0x43	; 67
     196:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			MCAL_timer_delay_ms(1000);
     19a:	28 ee       	ldi	r18, 0xE8	; 232
     19c:	33 e0       	ldi	r19, 0x03	; 3
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			g_buttonPresses++;
     1ae:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     1b2:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     1b6:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     1ba:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	a1 1d       	adc	r26, r1
     1c2:	b1 1d       	adc	r27, r1
     1c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
     1c8:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <__data_end+0x1>
     1cc:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <__data_end+0x2>
     1d0:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <__data_end+0x3>
		}
		
		if (g_buttonPresses || g_buttonData){
     1d4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     1d8:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     1dc:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     1e0:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     1e4:	89 2b       	or	r24, r25
     1e6:	8a 2b       	or	r24, r26
     1e8:	8b 2b       	or	r24, r27
     1ea:	29 f4       	brne	.+10     	; 0x1f6 <application_car_moving_system+0x9a>
     1ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     1f0:	88 23       	and	r24, r24
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <application_car_moving_system+0x9a>
     1f4:	3c c1       	rjmp	.+632    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     1f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     1fa:	88 23       	and	r24, r24
     1fc:	69 f4       	brne	.+26     	; 0x218 <application_car_moving_system+0xbc>
     1fe:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     202:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     206:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     20a:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     20e:	89 2b       	or	r24, r25
     210:	8a 2b       	or	r24, r26
     212:	8b 2b       	or	r24, r27
     214:	09 f4       	brne	.+2      	; 0x218 <application_car_moving_system+0xbc>
     216:	45 c1       	rjmp	.+650    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			//Step 3
			ECUAL_motor_move_all(50);
     218:	82 e3       	ldi	r24, 0x32	; 50
     21a:	0e 94 c6 03 	call	0x78c	; 0x78c <ECUAL_motor_move_all>
			ECUAL_led_on(LED_PORTC, PIN_0, HIGH);
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	83 e4       	ldi	r24, 0x43	; 67
     224:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			MCAL_timer_delay_ms(3000);
     228:	28 eb       	ldi	r18, 0xB8	; 184
     22a:	3b e0       	ldi	r19, 0x0B	; 11
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_0, HIGH);
     23c:	41 e0       	ldi	r20, 0x01	; 1
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	83 e4       	ldi	r24, 0x43	; 67
     242:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     246:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     24a:	88 23       	and	r24, r24
     24c:	69 f4       	brne	.+26     	; 0x268 <application_car_moving_system+0x10c>
     24e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     252:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     256:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     25a:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     25e:	89 2b       	or	r24, r25
     260:	8a 2b       	or	r24, r26
     262:	8b 2b       	or	r24, r27
     264:	09 f4       	brne	.+2      	; 0x268 <application_car_moving_system+0x10c>
     266:	1f c1       	rjmp	.+574    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			//Step 4
			//Stop
			ECUAL_motor_stop();
     268:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
     26c:	41 e0       	ldi	r20, 0x01	; 1
     26e:	64 e0       	ldi	r22, 0x04	; 4
     270:	83 e4       	ldi	r24, 0x43	; 67
     272:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			MCAL_timer_delay_ms(500);
     276:	24 ef       	ldi	r18, 0xF4	; 244
     278:	31 e0       	ldi	r19, 0x01	; 1
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
     28a:	41 e0       	ldi	r20, 0x01	; 1
     28c:	64 e0       	ldi	r22, 0x04	; 4
     28e:	83 e4       	ldi	r24, 0x43	; 67
     290:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     294:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     298:	88 23       	and	r24, r24
     29a:	69 f4       	brne	.+26     	; 0x2b6 <application_car_moving_system+0x15a>
     29c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     2a0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     2a4:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     2a8:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     2ac:	89 2b       	or	r24, r25
     2ae:	8a 2b       	or	r24, r26
     2b0:	8b 2b       	or	r24, r27
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <application_car_moving_system+0x15a>
     2b4:	fa c0       	rjmp	.+500    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			//Rotating
			ECUAL_led_on(LED_PORTC, PIN_3, HIGH);
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	68 e0       	ldi	r22, 0x08	; 8
     2ba:	83 e4       	ldi	r24, 0x43	; 67
     2bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			ECUAL_motor_move_right(80);
     2c0:	80 e5       	ldi	r24, 0x50	; 80
     2c2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <ECUAL_motor_move_right>
			MCAL_timer_delay_ms(300);
     2c6:	2c e2       	ldi	r18, 0x2C	; 44
     2c8:	31 e0       	ldi	r19, 0x01	; 1
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	60 e0       	ldi	r22, 0x00	; 0
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_3, HIGH);
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	68 e0       	ldi	r22, 0x08	; 8
     2de:	83 e4       	ldi	r24, 0x43	; 67
     2e0:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     2e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     2e8:	88 23       	and	r24, r24
     2ea:	69 f4       	brne	.+26     	; 0x306 <application_car_moving_system+0x1aa>
     2ec:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     2f0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     2f4:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     2f8:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     2fc:	89 2b       	or	r24, r25
     2fe:	8a 2b       	or	r24, r26
     300:	8b 2b       	or	r24, r27
     302:	09 f4       	brne	.+2      	; 0x306 <application_car_moving_system+0x1aa>
     304:	d4 c0       	rjmp	.+424    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			//Stop
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
     306:	41 e0       	ldi	r20, 0x01	; 1
     308:	64 e0       	ldi	r22, 0x04	; 4
     30a:	83 e4       	ldi	r24, 0x43	; 67
     30c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			ECUAL_motor_stop();
     310:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
			MCAL_timer_delay_ms(500);
     314:	24 ef       	ldi	r18, 0xF4	; 244
     316:	31 e0       	ldi	r19, 0x01	; 1
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
     328:	41 e0       	ldi	r20, 0x01	; 1
     32a:	64 e0       	ldi	r22, 0x04	; 4
     32c:	83 e4       	ldi	r24, 0x43	; 67
     32e:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     332:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     336:	88 23       	and	r24, r24
     338:	69 f4       	brne	.+26     	; 0x354 <application_car_moving_system+0x1f8>
     33a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     33e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     342:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     346:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     34a:	89 2b       	or	r24, r25
     34c:	8a 2b       	or	r24, r26
     34e:	8b 2b       	or	r24, r27
     350:	09 f4       	brne	.+2      	; 0x354 <application_car_moving_system+0x1f8>
     352:	af c0       	rjmp	.+350    	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			//Step 5
			ECUAL_motor_move_all(30);
     354:	8e e1       	ldi	r24, 0x1E	; 30
     356:	0e 94 c6 03 	call	0x78c	; 0x78c <ECUAL_motor_move_all>
			ECUAL_led_on(LED_PORTC, PIN_1, HIGH);
     35a:	41 e0       	ldi	r20, 0x01	; 1
     35c:	62 e0       	ldi	r22, 0x02	; 2
     35e:	83 e4       	ldi	r24, 0x43	; 67
     360:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			MCAL_timer_delay_ms(2000);
     364:	20 ed       	ldi	r18, 0xD0	; 208
     366:	37 e0       	ldi	r19, 0x07	; 7
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_1, HIGH);
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	83 e4       	ldi	r24, 0x43	; 67
     37e:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     382:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     386:	88 23       	and	r24, r24
     388:	69 f4       	brne	.+26     	; 0x3a4 <application_car_moving_system+0x248>
     38a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     38e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     392:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     396:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     39a:	89 2b       	or	r24, r25
     39c:	8a 2b       	or	r24, r26
     39e:	8b 2b       	or	r24, r27
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <application_car_moving_system+0x248>
     3a2:	89 c0       	rjmp	.+274    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
			//Step 6
			//Stop
			ECUAL_motor_stop();
     3a4:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	64 e0       	ldi	r22, 0x04	; 4
     3ac:	83 e4       	ldi	r24, 0x43	; 67
     3ae:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			MCAL_timer_delay_ms(500);
     3b2:	24 ef       	ldi	r18, 0xF4	; 244
     3b4:	31 e0       	ldi	r19, 0x01	; 1
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	64 e0       	ldi	r22, 0x04	; 4
     3ca:	83 e4       	ldi	r24, 0x43	; 67
     3cc:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     3d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     3d4:	88 23       	and	r24, r24
     3d6:	69 f4       	brne	.+26     	; 0x3f2 <application_car_moving_system+0x296>
     3d8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     3dc:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     3e0:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     3e4:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     3e8:	89 2b       	or	r24, r25
     3ea:	8a 2b       	or	r24, r26
     3ec:	8b 2b       	or	r24, r27
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <application_car_moving_system+0x296>
     3f0:	64 c0       	rjmp	.+200    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			//Rotating
			ECUAL_led_on(LED_PORTC, PIN_3, HIGH);
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	68 e0       	ldi	r22, 0x08	; 8
     3f6:	83 e4       	ldi	r24, 0x43	; 67
     3f8:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			ECUAL_motor_move_right(80);
     3fc:	80 e5       	ldi	r24, 0x50	; 80
     3fe:	0e 94 e5 03 	call	0x7ca	; 0x7ca <ECUAL_motor_move_right>
			MCAL_timer_delay_ms(300);
     402:	2c e2       	ldi	r18, 0x2C	; 44
     404:	31 e0       	ldi	r19, 0x01	; 1
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_3, HIGH);
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	68 e0       	ldi	r22, 0x08	; 8
     41a:	83 e4       	ldi	r24, 0x43	; 67
     41c:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     420:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     424:	88 23       	and	r24, r24
     426:	69 f4       	brne	.+26     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     428:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     42c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     430:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     434:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     438:	89 2b       	or	r24, r25
     43a:	8a 2b       	or	r24, r26
     43c:	8b 2b       	or	r24, r27
     43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	3e c0       	rjmp	.+124    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			//Stop
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	64 e0       	ldi	r22, 0x04	; 4
     446:	83 e4       	ldi	r24, 0x43	; 67
     448:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			ECUAL_motor_stop();
     44c:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
			MCAL_timer_delay_ms(500);
     450:	24 ef       	ldi	r18, 0xF4	; 244
     452:	31 e0       	ldi	r19, 0x01	; 1
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <MCAL_timer_delay_ms>
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	64 e0       	ldi	r22, 0x04	; 4
     468:	83 e4       	ldi	r24, 0x43	; 67
     46a:	0e 94 18 03 	call	0x630	; 0x630 <ECUAL_led_off>
		}
		
		if (g_buttonData == 0 && g_buttonPresses == 0){
     46e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <g_buttonData>
     472:	88 23       	and	r24, r24
     474:	09 f0       	breq	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
     476:	76 ce       	rjmp	.-788    	; 0x164 <application_car_moving_system+0x8>
     478:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     47c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     480:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     484:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     488:	89 2b       	or	r24, r25
     48a:	8a 2b       	or	r24, r26
     48c:	8b 2b       	or	r24, r27
     48e:	09 f0       	breq	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	69 ce       	rjmp	.-814    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
     492:	41 e0       	ldi	r20, 0x01	; 1
     494:	64 e0       	ldi	r22, 0x04	; 4
     496:	83 e4       	ldi	r24, 0x43	; 67
     498:	0e 94 ff 02 	call	0x5fe	; 0x5fe <ECUAL_led_on>
			ECUAL_motor_stop();
     49c:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
     4a0:	61 ce       	rjmp	.-830    	; 0x164 <application_car_moving_system+0x8>
			MCAL_timer_delay_ms(1000);
			g_buttonPresses++;
		}
		
		if (g_buttonPresses || g_buttonData){
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4a2:	00 00       	nop
     4a4:	5f ce       	rjmp	.-834    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_motor_move_all(50);
			ECUAL_led_on(LED_PORTC, PIN_0, HIGH);
			MCAL_timer_delay_ms(3000);
			ECUAL_led_off(LED_PORTC, PIN_0, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4a6:	00 00       	nop
     4a8:	5d ce       	rjmp	.-838    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_motor_stop();
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
			MCAL_timer_delay_ms(500);
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4aa:	00 00       	nop
     4ac:	5b ce       	rjmp	.-842    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_led_on(LED_PORTC, PIN_3, HIGH);
			ECUAL_motor_move_right(80);
			MCAL_timer_delay_ms(300);
			ECUAL_led_off(LED_PORTC, PIN_3, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4ae:	00 00       	nop
     4b0:	59 ce       	rjmp	.-846    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
			ECUAL_motor_stop();
			MCAL_timer_delay_ms(500);
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4b2:	00 00       	nop
     4b4:	57 ce       	rjmp	.-850    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_motor_move_all(30);
			ECUAL_led_on(LED_PORTC, PIN_1, HIGH);
			MCAL_timer_delay_ms(2000);
			ECUAL_led_off(LED_PORTC, PIN_1, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4b6:	00 00       	nop
     4b8:	55 ce       	rjmp	.-854    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_motor_stop();
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
			MCAL_timer_delay_ms(500);
			ECUAL_led_off(LED_PORTC, PIN_2, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4ba:	00 00       	nop
     4bc:	53 ce       	rjmp	.-858    	; 0x164 <application_car_moving_system+0x8>
			ECUAL_led_on(LED_PORTC, PIN_3, HIGH);
			ECUAL_motor_move_right(80);
			MCAL_timer_delay_ms(300);
			ECUAL_led_off(LED_PORTC, PIN_3, HIGH);
			
			if (g_buttonData == 0 && g_buttonPresses == 0){continue;}
     4be:	00 00       	nop
		if (g_buttonData == 0 && g_buttonPresses == 0){
			ECUAL_led_on(LED_PORTC, PIN_2, HIGH);
			ECUAL_motor_stop();
		}

	}
     4c0:	51 ce       	rjmp	.-862    	; 0x164 <application_car_moving_system+0x8>

000004c2 <emergency_stop>:
}

void emergency_stop(void){
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	ECUAL_motor_stop();
     4ca:	0e 94 b4 03 	call	0x768	; 0x768 <ECUAL_motor_stop>
	g_buttonData = 0;
     4ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <g_buttonData>
	g_buttonPresses = 0;
     4d2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
     4d6:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <__data_end+0x1>
     4da:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end+0x2>
     4de:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__data_end+0x3>
}
     4e2:	00 00       	nop
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <ECUAL_button_init>:
 *  Author: Ahmed
 */ 
#include "button.h"


button_status_t ECUAL_button_init(uint8_t portx, uint8_t pinNumber){
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <ECUAL_button_init+0x6>
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <ECUAL_button_init+0x8>
     4f2:	1f 92       	push	r1
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	8c 83       	std	Y+4, r24	; 0x04
     4fa:	6d 83       	std	Y+5, r22	; 0x05
	pin_config_t pinconfig;
			
	pinconfig.dioDirection = INPUT_MODE;
     4fc:	1a 82       	std	Y+2, r1	; 0x02
	pinconfig.portOptionEnable = PORT_OPTION_DISABLE;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	8b 83       	std	Y+3, r24	; 0x03
	pinconfig.pinNumber = pinNumber;
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	89 83       	std	Y+1, r24	; 0x01
	
	
	return (MCAL_dio_init(portx, &pinconfig) != DIO_OK) ? BUTTON_INIT_ERROR : BUTTON_OK;
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	bc 01       	movw	r22, r24
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
     512:	98 2f       	mov	r25, r24
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	99 23       	and	r25, r25
     518:	09 f4       	brne	.+2      	; 0x51c <ECUAL_button_init+0x32>
     51a:	80 e0       	ldi	r24, 0x00	; 0
}
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <ECUAL_button_read>:


button_status_t ECUAL_button_read(uint8_t portx, uint8_t pinNumber, uint8_t * value){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	00 d0       	rcall	.+0      	; 0x532 <ECUAL_button_read+0x6>
     532:	00 d0       	rcall	.+0      	; 0x534 <ECUAL_button_read+0x8>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	6a 83       	std	Y+2, r22	; 0x02
     53c:	5c 83       	std	Y+4, r21	; 0x04
     53e:	4b 83       	std	Y+3, r20	; 0x03
	return (MCAL_dio_read_pin(portx, pinNumber, value) != DIO_OK) ? BUTTON_READ_ERROR : BUTTON_OK;	
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	ac 01       	movw	r20, r24
     546:	6a 81       	ldd	r22, Y+2	; 0x02
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	0e 94 35 05 	call	0xa6a	; 0xa6a <MCAL_dio_read_pin>
     54e:	88 23       	and	r24, r24
     550:	11 f0       	breq	.+4      	; 0x556 <ECUAL_button_read+0x2a>
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	01 c0       	rjmp	.+2      	; 0x558 <ECUAL_button_read+0x2c>
     556:	80 e0       	ldi	r24, 0x00	; 0
}
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <ECUAL_button_enable_EXTI>:


button_status_t ECUAL_button_enable_EXTI(uint8_t EXTINumber, void (* callback)(void), uint8_t triggerCase){
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	29 97       	sbiw	r28, 0x09	; 9
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	8e 83       	std	Y+6, r24	; 0x06
     57c:	78 87       	std	Y+8, r23	; 0x08
     57e:	6f 83       	std	Y+7, r22	; 0x07
     580:	49 87       	std	Y+9, r20	; 0x09
	exti_config_t exti;
	
	exti.extiEnable = EXTI_ENABLE;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	89 83       	std	Y+1, r24	; 0x01
	
	exti.extiNumber = EXTINumber;
     586:	8e 81       	ldd	r24, Y+6	; 0x06
     588:	8a 83       	std	Y+2, r24	; 0x02
	
	exti.triggerCase = triggerCase;
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	8b 83       	std	Y+3, r24	; 0x03
	
	exti.P_IRQ_callback = callback;
     58e:	8f 81       	ldd	r24, Y+7	; 0x07
     590:	98 85       	ldd	r25, Y+8	; 0x08
     592:	9d 83       	std	Y+5, r25	; 0x05
     594:	8c 83       	std	Y+4, r24	; 0x04
	
	if (MCAL_EXTI_init(&exti) != EXTI_OK){
     596:	ce 01       	movw	r24, r28
     598:	01 96       	adiw	r24, 0x01	; 1
     59a:	0e 94 69 05 	call	0xad2	; 0xad2 <MCAL_EXTI_init>
     59e:	88 23       	and	r24, r24
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <ECUAL_button_enable_EXTI+0x40>
		return BUTTON_EXTI_ERROR;
     5a2:	83 e0       	ldi	r24, 0x03	; 3
     5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <ECUAL_button_enable_EXTI+0x42>
	} 
	
	return BUTTON_OK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <ECUAL_led_init>:
 *  Author: Ahmed
 */ 

#include "led.h"

led_status_t ECUAL_led_init(uint8_t portx, uint8_t pinNumber){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <ECUAL_led_init+0x6>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <ECUAL_led_init+0x8>
     5c2:	1f 92       	push	r1
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	8c 83       	std	Y+4, r24	; 0x04
     5ca:	6d 83       	std	Y+5, r22	; 0x05
	pin_config_t pinconfig;
	
	
	pinconfig.dioDirection = OUTPUT_MODE;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	8a 83       	std	Y+2, r24	; 0x02
	pinconfig.portOptionEnable = PORT_OPTION_DISABLE;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	8b 83       	std	Y+3, r24	; 0x03
	pinconfig.pinNumber = pinNumber;
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	89 83       	std	Y+1, r24	; 0x01
	
	return (MCAL_dio_init(portx, &pinconfig) != DIO_OK) ? LED_INIT_ERROR : LED_OK;
     5d8:	ce 01       	movw	r24, r28
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	bc 01       	movw	r22, r24
     5de:	8c 81       	ldd	r24, Y+4	; 0x04
     5e0:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
     5e4:	98 2f       	mov	r25, r24
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	99 23       	and	r25, r25
     5ea:	09 f4       	brne	.+2      	; 0x5ee <ECUAL_led_init+0x34>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
		
}
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <ECUAL_led_on>:

led_status_t ECUAL_led_on(uint8_t portx, uint8_t pinNumber,uint8_t workCondtion){
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <ECUAL_led_on+0x6>
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	6a 83       	std	Y+2, r22	; 0x02
     60e:	4b 83       	std	Y+3, r20	; 0x03
	return (MCAL_dio_write_pin(portx, pinNumber, workCondtion) != DIO_OK) ? LED_ON_ERROR : LED_OK;
     610:	4b 81       	ldd	r20, Y+3	; 0x03
     612:	6a 81       	ldd	r22, Y+2	; 0x02
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     61a:	88 23       	and	r24, r24
     61c:	11 f0       	breq	.+4      	; 0x622 <ECUAL_led_on+0x24>
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	01 c0       	rjmp	.+2      	; 0x624 <ECUAL_led_on+0x26>
     622:	80 e0       	ldi	r24, 0x00	; 0
}
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <ECUAL_led_off>:

led_status_t ECUAL_led_off(uint8_t portx, uint8_t pinNumber, uint8_t workCondtion){
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <ECUAL_led_off+0x6>
     636:	1f 92       	push	r1
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	89 83       	std	Y+1, r24	; 0x01
     63e:	6a 83       	std	Y+2, r22	; 0x02
     640:	4b 83       	std	Y+3, r20	; 0x03
	
	if (workCondtion == HIGH){
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	59 f4       	brne	.+22     	; 0x65e <ECUAL_led_off+0x2e>
		return (MCAL_dio_write_pin(portx, pinNumber, LOW) != DIO_OK) ? LED_OFF_ERROR : LED_OK;
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	6a 81       	ldd	r22, Y+2	; 0x02
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     652:	88 23       	and	r24, r24
     654:	11 f0       	breq	.+4      	; 0x65a <ECUAL_led_off+0x2a>
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	11 c0       	rjmp	.+34     	; 0x67c <ECUAL_led_off+0x4c>
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0f c0       	rjmp	.+30     	; 0x67c <ECUAL_led_off+0x4c>
	} else if (workCondtion == LOW) {
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	88 23       	and	r24, r24
     662:	59 f4       	brne	.+22     	; 0x67a <ECUAL_led_off+0x4a>
		return (MCAL_dio_write_pin(portx, pinNumber, HIGH) != DIO_OK) ? LED_OFF_ERROR : LED_OK;
     664:	41 e0       	ldi	r20, 0x01	; 1
     666:	6a 81       	ldd	r22, Y+2	; 0x02
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     66e:	88 23       	and	r24, r24
     670:	11 f0       	breq	.+4      	; 0x676 <ECUAL_led_off+0x46>
     672:	83 e0       	ldi	r24, 0x03	; 3
     674:	03 c0       	rjmp	.+6      	; 0x67c <ECUAL_led_off+0x4c>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	01 c0       	rjmp	.+2      	; 0x67c <ECUAL_led_off+0x4c>
	}else {
		return LED_OFF_ERROR;
     67a:	83 e0       	ldi	r24, 0x03	; 3
	}
	
}
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <ECUAL_motor_init>:
	MCAL_dio_write_pin(MOTOR_PORT, PIN_5, HIGH);
	
	//Motor4
	MCAL_dio_write_pin(MOTOR_PORT, PIN_6, LOW);
	MCAL_dio_write_pin(MOTOR_PORT, PIN_7, HIGH);
}
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	00 d0       	rcall	.+0      	; 0x68e <ECUAL_motor_init+0x6>
     68e:	00 d0       	rcall	.+0      	; 0x690 <ECUAL_motor_init+0x8>
     690:	00 d0       	rcall	.+0      	; 0x692 <ECUAL_motor_init+0xa>
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 f6 06 	call	0xdec	; 0xdec <MCAL_pwm_init>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8d 83       	std	Y+5, r24	; 0x05
     6ae:	1e 82       	std	Y+6, r1	; 0x06
     6b0:	ce 01       	movw	r24, r28
     6b2:	04 96       	adiw	r24, 0x04	; 4
     6b4:	bc 01       	movw	r22, r24
     6b6:	81 e6       	ldi	r24, 0x61	; 97
     6b8:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	8e 83       	std	Y+6, r24	; 0x06
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	8c 83       	std	Y+4, r24	; 0x04
     6c4:	ce 01       	movw	r24, r28
     6c6:	04 96       	adiw	r24, 0x04	; 4
     6c8:	bc 01       	movw	r22, r24
     6ca:	82 e6       	ldi	r24, 0x62	; 98
     6cc:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
     6d0:	80 e8       	ldi	r24, 0x80	; 128
     6d2:	8c 83       	std	Y+4, r24	; 0x04
     6d4:	ce 01       	movw	r24, r28
     6d6:	04 96       	adiw	r24, 0x04	; 4
     6d8:	bc 01       	movw	r22, r24
     6da:	82 e6       	ldi	r24, 0x62	; 98
     6dc:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	60 e4       	ldi	r22, 0x40	; 64
     6e4:	82 e6       	ldi	r24, 0x62	; 98
     6e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	60 e8       	ldi	r22, 0x80	; 128
     6ee:	82 e6       	ldi	r24, 0x62	; 98
     6f0:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     6f4:	00 00       	nop
     6f6:	26 96       	adiw	r28, 0x06	; 6
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <ECUAL_motor_move_forward>:
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	81 e6       	ldi	r24, 0x61	; 97
     716:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	81 e6       	ldi	r24, 0x61	; 97
     720:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     724:	41 e0       	ldi	r20, 0x01	; 1
     726:	64 e0       	ldi	r22, 0x04	; 4
     728:	81 e6       	ldi	r24, 0x61	; 97
     72a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	68 e0       	ldi	r22, 0x08	; 8
     732:	81 e6       	ldi	r24, 0x61	; 97
     734:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	60 e1       	ldi	r22, 0x10	; 16
     73c:	81 e6       	ldi	r24, 0x61	; 97
     73e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	60 e2       	ldi	r22, 0x20	; 32
     746:	81 e6       	ldi	r24, 0x61	; 97
     748:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	60 e4       	ldi	r22, 0x40	; 64
     750:	81 e6       	ldi	r24, 0x61	; 97
     752:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	60 e8       	ldi	r22, 0x80	; 128
     75a:	81 e6       	ldi	r24, 0x61	; 97
     75c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
     760:	00 00       	nop
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <ECUAL_motor_stop>:

void ECUAL_motor_stop(void){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S1M_PIN, HIGH);
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	60 e4       	ldi	r22, 0x40	; 64
     774:	82 e6       	ldi	r24, 0x62	; 98
     776:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S2M_PIN, HIGH);
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	60 e8       	ldi	r22, 0x80	; 128
     77e:	82 e6       	ldi	r24, 0x62	; 98
     780:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
}
     784:	00 00       	nop
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	08 95       	ret

0000078c <ECUAL_motor_move_all>:

void ECUAL_motor_move_all(uint8_t speed){
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	1f 92       	push	r1
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	89 83       	std	Y+1, r24	; 0x01
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S1M_PIN, LOW);
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	60 e4       	ldi	r22, 0x40	; 64
     79c:	82 e6       	ldi	r24, 0x62	; 98
     79e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S2M_PIN, LOW);
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	60 e8       	ldi	r22, 0x80	; 128
     7a6:	82 e6       	ldi	r24, 0x62	; 98
     7a8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	MCAL_pwm_set_duty_cycle(PWM_NUMBER_1, speed);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a0 e0       	ldi	r26, 0x00	; 0
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ac 01       	movw	r20, r24
     7b8:	bd 01       	movw	r22, r26
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_pwm_set_duty_cycle>
}
     7c0:	00 00       	nop
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <ECUAL_motor_move_right>:


void ECUAL_motor_move_right(uint8_t speed){
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	1f 92       	push	r1
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	89 83       	std	Y+1, r24	; 0x01
	//For 74153 IC 
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S1M_PIN, LOW);
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	60 e4       	ldi	r22, 0x40	; 64
     7da:	82 e6       	ldi	r24, 0x62	; 98
     7dc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	MCAL_dio_write_pin(MOTOR_R_L_PORT, MOTOR_S2M_PIN, HIGH);
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	60 e8       	ldi	r22, 0x80	; 128
     7e4:	82 e6       	ldi	r24, 0x62	; 98
     7e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	
	
	MCAL_pwm_set_duty_cycle(PWM_NUMBER_1, speed);
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	ac 01       	movw	r20, r24
     7f6:	bd 01       	movw	r22, r26
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 c9 07 	call	0xf92	; 0xf92 <MCAL_pwm_set_duty_cycle>
}
     7fe:	00 00       	nop
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <main>:

void pwm_test(uint32_t value);

void timer_i(void);

int main(void){
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
	
	application_car_moving_system_init();
     810:	0e 94 6d 00 	call	0xda	; 0xda <application_car_moving_system_init>

	application_car_moving_system();
     814:	0e 94 ae 00 	call	0x15c	; 0x15c <application_car_moving_system>
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
		
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <get_port_index>:
	} else {
		*dio_ports[index] ^= pin; //Writing 1
	}
			
	return DIO_OK;
}
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	00 d0       	rcall	.+0      	; 0x828 <get_port_index+0x6>
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	8a 83       	std	Y+2, r24	; 0x02
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	88 2f       	mov	r24, r24
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	09 2e       	mov	r0, r25
     836:	00 0c       	add	r0, r0
     838:	aa 0b       	sbc	r26, r26
     83a:	bb 0b       	sbc	r27, r27
     83c:	41 e4       	ldi	r20, 0x41	; 65
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	23 e2       	ldi	r18, 0x23	; 35
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	84 1b       	sub	r24, r20
     846:	95 0b       	sbc	r25, r21
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	80 f0       	brcs	.+32     	; 0x86e <__stack+0xf>
     84e:	86 5d       	subi	r24, 0xD6	; 214
     850:	9f 4f       	sbci	r25, 0xFF	; 255
     852:	fc 01       	movw	r30, r24
     854:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__tablejump2__>
     858:	19 82       	std	Y+1, r1	; 0x01
     85a:	0b c0       	rjmp	.+22     	; 0x872 <__stack+0x13>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	89 83       	std	Y+1, r24	; 0x01
     860:	08 c0       	rjmp	.+16     	; 0x872 <__stack+0x13>
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	89 83       	std	Y+1, r24	; 0x01
     866:	05 c0       	rjmp	.+10     	; 0x872 <__stack+0x13>
     868:	83 e0       	ldi	r24, 0x03	; 3
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
     86e:	89 e0       	ldi	r24, 0x09	; 9
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <MCAL_dio_init>:
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	00 d0       	rcall	.+0      	; 0x884 <MCAL_dio_init+0x6>
     884:	00 d0       	rcall	.+0      	; 0x886 <MCAL_dio_init+0x8>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	7c 83       	std	Y+4, r23	; 0x04
     88e:	6b 83       	std	Y+3, r22	; 0x03
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	0e 94 11 04 	call	0x822	; 0x822 <get_port_index>
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	89 30       	cpi	r24, 0x09	; 9
     89c:	11 f4       	brne	.+4      	; 0x8a2 <MCAL_dio_init+0x24>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	83 c0       	rjmp	.+262    	; 0x9a8 <MCAL_dio_init+0x12a>
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	fc 01       	movw	r30, r24
     8a8:	82 81       	ldd	r24, Z+2	; 0x02
     8aa:	88 23       	and	r24, r24
     8ac:	c9 f5       	brne	.+114    	; 0x920 <MCAL_dio_init+0xa2>
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	fc 01       	movw	r30, r24
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	d1 f4       	brne	.+52     	; 0x8ee <MCAL_dio_init+0x70>
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	88 2f       	mov	r24, r24
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 59       	subi	r24, 0x98	; 152
     8c6:	9f 4f       	sbci	r25, 0xFF	; 255
     8c8:	fc 01       	movw	r30, r24
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	88 2f       	mov	r24, r24
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 59       	subi	r24, 0x98	; 152
     8de:	9f 4f       	sbci	r25, 0xFF	; 255
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	5c c0       	rjmp	.+184    	; 0x9a6 <MCAL_dio_init+0x128>
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	88 59       	subi	r24, 0x98	; 152
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	91 81       	ldd	r25, Z+1	; 0x01
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	88 59       	subi	r24, 0x98	; 152
     912:	9f 4f       	sbci	r25, 0xFF	; 255
     914:	fc 01       	movw	r30, r24
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	fc 01       	movw	r30, r24
     91c:	10 82       	st	Z, r1
     91e:	43 c0       	rjmp	.+134    	; 0x9a6 <MCAL_dio_init+0x128>
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	fc 01       	movw	r30, r24
     926:	81 81       	ldd	r24, Z+1	; 0x01
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	f1 f4       	brne	.+60     	; 0x968 <MCAL_dio_init+0xea>
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	88 59       	subi	r24, 0x98	; 152
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	29 81       	ldd	r18, Y+1	; 0x01
     942:	22 2f       	mov	r18, r18
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	28 59       	subi	r18, 0x98	; 152
     94c:	3f 4f       	sbci	r19, 0xFF	; 255
     94e:	f9 01       	movw	r30, r18
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	f9 01       	movw	r30, r18
     956:	40 81       	ld	r20, Z
     958:	2b 81       	ldd	r18, Y+3	; 0x03
     95a:	3c 81       	ldd	r19, Y+4	; 0x04
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	24 2b       	or	r18, r20
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
     966:	1f c0       	rjmp	.+62     	; 0x9a6 <MCAL_dio_init+0x128>
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	88 59       	subi	r24, 0x98	; 152
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	fc 01       	movw	r30, r24
     978:	80 81       	ld	r24, Z
     97a:	91 81       	ldd	r25, Z+1	; 0x01
     97c:	29 81       	ldd	r18, Y+1	; 0x01
     97e:	22 2f       	mov	r18, r18
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	22 0f       	add	r18, r18
     984:	33 1f       	adc	r19, r19
     986:	28 59       	subi	r18, 0x98	; 152
     988:	3f 4f       	sbci	r19, 0xFF	; 255
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	31 81       	ldd	r19, Z+1	; 0x01
     990:	f9 01       	movw	r30, r18
     992:	20 81       	ld	r18, Z
     994:	42 2f       	mov	r20, r18
     996:	2b 81       	ldd	r18, Y+3	; 0x03
     998:	3c 81       	ldd	r19, Y+4	; 0x04
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	20 95       	com	r18
     9a0:	24 23       	and	r18, r20
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <MCAL_dio_write_pin>:
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <MCAL_dio_write_pin+0x6>
     9bc:	00 d0       	rcall	.+0      	; 0x9be <MCAL_dio_write_pin+0x8>
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
     9c2:	8a 83       	std	Y+2, r24	; 0x02
     9c4:	6b 83       	std	Y+3, r22	; 0x03
     9c6:	4c 83       	std	Y+4, r20	; 0x04
     9c8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ca:	0e 94 11 04 	call	0x822	; 0x822 <get_port_index>
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	89 30       	cpi	r24, 0x09	; 9
     9d4:	11 f4       	brne	.+4      	; 0x9da <MCAL_dio_write_pin+0x24>
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	41 c0       	rjmp	.+130    	; 0xa5c <MCAL_dio_write_pin+0xa6>
     9da:	8c 81       	ldd	r24, Y+4	; 0x04
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	d9 f4       	brne	.+54     	; 0xa16 <MCAL_dio_write_pin+0x60>
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	88 2f       	mov	r24, r24
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	80 5a       	subi	r24, 0xA0	; 160
     9ec:	9f 4f       	sbci	r25, 0xFF	; 255
     9ee:	fc 01       	movw	r30, r24
     9f0:	80 81       	ld	r24, Z
     9f2:	91 81       	ldd	r25, Z+1	; 0x01
     9f4:	29 81       	ldd	r18, Y+1	; 0x01
     9f6:	22 2f       	mov	r18, r18
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	20 5a       	subi	r18, 0xA0	; 160
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	f9 01       	movw	r30, r18
     a04:	20 81       	ld	r18, Z
     a06:	31 81       	ldd	r19, Z+1	; 0x01
     a08:	f9 01       	movw	r30, r18
     a0a:	30 81       	ld	r19, Z
     a0c:	2b 81       	ldd	r18, Y+3	; 0x03
     a0e:	23 2b       	or	r18, r19
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	22 c0       	rjmp	.+68     	; 0xa5a <MCAL_dio_write_pin+0xa4>
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	88 23       	and	r24, r24
     a1a:	e9 f4       	brne	.+58     	; 0xa56 <MCAL_dio_write_pin+0xa0>
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	80 5a       	subi	r24, 0xA0	; 160
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	29 81       	ldd	r18, Y+1	; 0x01
     a32:	22 2f       	mov	r18, r18
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	22 0f       	add	r18, r18
     a38:	33 1f       	adc	r19, r19
     a3a:	20 5a       	subi	r18, 0xA0	; 160
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	f9 01       	movw	r30, r18
     a40:	20 81       	ld	r18, Z
     a42:	31 81       	ldd	r19, Z+1	; 0x01
     a44:	f9 01       	movw	r30, r18
     a46:	20 81       	ld	r18, Z
     a48:	32 2f       	mov	r19, r18
     a4a:	2b 81       	ldd	r18, Y+3	; 0x03
     a4c:	20 95       	com	r18
     a4e:	23 23       	and	r18, r19
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <MCAL_dio_write_pin+0xa4>
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <MCAL_dio_write_pin+0xa6>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <MCAL_dio_read_pin>:

dio_status MCAL_dio_read_pin(uint8_t portx, uint8_t pin, uint8_t* value){
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <MCAL_dio_read_pin+0x6>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <MCAL_dio_read_pin+0x8>
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	8a 83       	std	Y+2, r24	; 0x02
     a7a:	6b 83       	std	Y+3, r22	; 0x03
     a7c:	5d 83       	std	Y+5, r21	; 0x05
     a7e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t index = get_port_index(portx);
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	0e 94 11 04 	call	0x822	; 0x822 <get_port_index>
     a86:	89 83       	std	Y+1, r24	; 0x01
		
	if (index == 9){
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	89 30       	cpi	r24, 0x09	; 9
     a8c:	11 f4       	brne	.+4      	; 0xa92 <MCAL_dio_read_pin+0x28>
		return DIO_READ_PIN_ERROR;
     a8e:	85 e0       	ldi	r24, 0x05	; 5
     a90:	18 c0       	rjmp	.+48     	; 0xac2 <MCAL_dio_read_pin+0x58>
	} else {
		 *value = ((*dio_pins[index] & pin) != LOW) ? HIGH : LOW; //Writing data
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	88 2f       	mov	r24, r24
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	80 59       	subi	r24, 0x90	; 144
     a9e:	9f 4f       	sbci	r25, 0xFF	; 255
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	91 81       	ldd	r25, Z+1	; 0x01
     aa6:	fc 01       	movw	r30, r24
     aa8:	90 81       	ld	r25, Z
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	98 23       	and	r25, r24
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	99 23       	and	r25, r25
     ab2:	09 f4       	brne	.+2      	; 0xab6 <MCAL_dio_read_pin+0x4c>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	28 2f       	mov	r18, r24
     ab8:	8c 81       	ldd	r24, Y+4	; 0x04
     aba:	9d 81       	ldd	r25, Y+5	; 0x05
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
	}
		
	return DIO_OK;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
}
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	0f 90       	pop	r0
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <MCAL_EXTI_init>:

#include "external_interrupt.h"

void (* GP_IRQ_callback[3])(void);

EXTI_status	MCAL_EXTI_init(exti_config_t* config){
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <MCAL_EXTI_init+0x6>
     ad8:	00 d0       	rcall	.+0      	; 0xada <MCAL_EXTI_init+0x8>
     ada:	1f 92       	push	r1
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	9d 83       	std	Y+5, r25	; 0x05
     ae2:	8c 83       	std	Y+4, r24	; 0x04
	pin_config_t pinConfig;
	
	INTERRUPT_ENABLE;
     ae4:	78 94       	sei
	
	pinConfig.dioDirection == INPUT_MODE;
	pinConfig.portOptionEnable == PORT_OPTION_DISABLE;
	
	switch (config->extiNumber){
     ae6:	8c 81       	ldd	r24, Y+4	; 0x04
     ae8:	9d 81       	ldd	r25, Y+5	; 0x05
     aea:	fc 01       	movw	r30, r24
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	88 2f       	mov	r24, r24
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	91 05       	cpc	r25, r1
     af6:	09 f4       	brne	.+2      	; 0xafa <MCAL_EXTI_init+0x28>
     af8:	4d c0       	rjmp	.+154    	; 0xb94 <MCAL_EXTI_init+0xc2>
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	91 05       	cpc	r25, r1
     afe:	09 f4       	brne	.+2      	; 0xb02 <MCAL_EXTI_init+0x30>
     b00:	88 c0       	rjmp	.+272    	; 0xc12 <MCAL_EXTI_init+0x140>
     b02:	89 2b       	or	r24, r25
     b04:	09 f0       	breq	.+2      	; 0xb08 <MCAL_EXTI_init+0x36>
     b06:	cf c0       	rjmp	.+414    	; 0xca6 <MCAL_EXTI_init+0x1d4>
		
		case EXTI0:{
			MCUCR |= (config->triggerCase << 2);
     b08:	85 e5       	ldi	r24, 0x55	; 85
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	25 e5       	ldi	r18, 0x55	; 85
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	f9 01       	movw	r30, r18
     b12:	20 81       	ld	r18, Z
     b14:	42 2f       	mov	r20, r18
     b16:	2c 81       	ldd	r18, Y+4	; 0x04
     b18:	3d 81       	ldd	r19, Y+5	; 0x05
     b1a:	f9 01       	movw	r30, r18
     b1c:	22 81       	ldd	r18, Z+2	; 0x02
     b1e:	22 2f       	mov	r18, r18
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	24 2b       	or	r18, r20
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
			
			pinConfig.pinNumber = PIN_2;
     b30:	84 e0       	ldi	r24, 0x04	; 4
     b32:	89 83       	std	Y+1, r24	; 0x01
			
			MCAL_dio_init('d', &pinConfig);
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	bc 01       	movw	r22, r24
     b3a:	84 e6       	ldi	r24, 0x64	; 100
     b3c:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			GP_IRQ_callback[0] = config->P_IRQ_callback;
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	9d 81       	ldd	r25, Y+5	; 0x05
     b44:	fc 01       	movw	r30, r24
     b46:	83 81       	ldd	r24, Z+3	; 0x03
     b48:	94 81       	ldd	r25, Z+4	; 0x04
     b4a:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <GP_IRQ_callback+0x1>
     b4e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <GP_IRQ_callback>
			
			if (config->extiEnable == EXTI_ENABLE){
     b52:	8c 81       	ldd	r24, Y+4	; 0x04
     b54:	9d 81       	ldd	r25, Y+5	; 0x05
     b56:	fc 01       	movw	r30, r24
     b58:	80 81       	ld	r24, Z
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	51 f4       	brne	.+20     	; 0xb72 <MCAL_EXTI_init+0xa0>
				SET_BIT(GICR,6);
     b5e:	8b e5       	ldi	r24, 0x5B	; 91
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	2b e5       	ldi	r18, 0x5B	; 91
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	20 81       	ld	r18, Z
     b6a:	20 64       	ori	r18, 0x40	; 64
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,6);
			}
			
			break;
     b70:	9c c0       	rjmp	.+312    	; 0xcaa <MCAL_EXTI_init+0x1d8>
			
			GP_IRQ_callback[0] = config->P_IRQ_callback;
			
			if (config->extiEnable == EXTI_ENABLE){
				SET_BIT(GICR,6);
				} else if (config->extiEnable == EXTI_DISABLE){
     b72:	8c 81       	ldd	r24, Y+4	; 0x04
     b74:	9d 81       	ldd	r25, Y+5	; 0x05
     b76:	fc 01       	movw	r30, r24
     b78:	80 81       	ld	r24, Z
     b7a:	88 23       	and	r24, r24
     b7c:	09 f0       	breq	.+2      	; 0xb80 <MCAL_EXTI_init+0xae>
     b7e:	95 c0       	rjmp	.+298    	; 0xcaa <MCAL_EXTI_init+0x1d8>
				CLEAR_BIT(GICR,6);
     b80:	8b e5       	ldi	r24, 0x5B	; 91
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	2b e5       	ldi	r18, 0x5B	; 91
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	f9 01       	movw	r30, r18
     b8a:	20 81       	ld	r18, Z
     b8c:	2f 7b       	andi	r18, 0xBF	; 191
     b8e:	fc 01       	movw	r30, r24
     b90:	20 83       	st	Z, r18
			}
			
			break;
     b92:	8b c0       	rjmp	.+278    	; 0xcaa <MCAL_EXTI_init+0x1d8>
		}
		
		case EXTI1:{
			MCUCR |= (config->triggerCase);
     b94:	85 e5       	ldi	r24, 0x55	; 85
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	25 e5       	ldi	r18, 0x55	; 85
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	f9 01       	movw	r30, r18
     b9e:	40 81       	ld	r20, Z
     ba0:	2c 81       	ldd	r18, Y+4	; 0x04
     ba2:	3d 81       	ldd	r19, Y+5	; 0x05
     ba4:	f9 01       	movw	r30, r18
     ba6:	22 81       	ldd	r18, Z+2	; 0x02
     ba8:	24 2b       	or	r18, r20
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
			
			pinConfig.pinNumber = PIN_3;
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	89 83       	std	Y+1, r24	; 0x01
			
			MCAL_dio_init('d',&pinConfig);
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	bc 01       	movw	r22, r24
     bb8:	84 e6       	ldi	r24, 0x64	; 100
     bba:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			GP_IRQ_callback[1] = config->P_IRQ_callback;
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	9d 81       	ldd	r25, Y+5	; 0x05
     bc2:	fc 01       	movw	r30, r24
     bc4:	83 81       	ldd	r24, Z+3	; 0x03
     bc6:	94 81       	ldd	r25, Z+4	; 0x04
     bc8:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <GP_IRQ_callback+0x3>
     bcc:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <GP_IRQ_callback+0x2>
			
			if (config->extiEnable == EXTI_ENABLE){
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	fc 01       	movw	r30, r24
     bd6:	80 81       	ld	r24, Z
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	51 f4       	brne	.+20     	; 0xbf0 <MCAL_EXTI_init+0x11e>
				SET_BIT(GICR,7);
     bdc:	8b e5       	ldi	r24, 0x5B	; 91
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	2b e5       	ldi	r18, 0x5B	; 91
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	f9 01       	movw	r30, r18
     be6:	20 81       	ld	r18, Z
     be8:	20 68       	ori	r18, 0x80	; 128
     bea:	fc 01       	movw	r30, r24
     bec:	20 83       	st	Z, r18
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,7);
			}
			
			break;
     bee:	5f c0       	rjmp	.+190    	; 0xcae <MCAL_EXTI_init+0x1dc>
			
			GP_IRQ_callback[1] = config->P_IRQ_callback;
			
			if (config->extiEnable == EXTI_ENABLE){
				SET_BIT(GICR,7);
				} else if (config->extiEnable == EXTI_DISABLE){
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	9d 81       	ldd	r25, Y+5	; 0x05
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	88 23       	and	r24, r24
     bfa:	09 f0       	breq	.+2      	; 0xbfe <MCAL_EXTI_init+0x12c>
     bfc:	58 c0       	rjmp	.+176    	; 0xcae <MCAL_EXTI_init+0x1dc>
				CLEAR_BIT(GICR,7);
     bfe:	8b e5       	ldi	r24, 0x5B	; 91
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2b e5       	ldi	r18, 0x5B	; 91
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	2f 77       	andi	r18, 0x7F	; 127
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
			}
			
			break;
     c10:	4e c0       	rjmp	.+156    	; 0xcae <MCAL_EXTI_init+0x1dc>
		}
		
		case EXTI2:{
			MCUCSR |= (config->triggerCase << 6);
     c12:	84 e5       	ldi	r24, 0x54	; 84
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	24 e5       	ldi	r18, 0x54	; 84
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	f9 01       	movw	r30, r18
     c1c:	20 81       	ld	r18, Z
     c1e:	42 2f       	mov	r20, r18
     c20:	2c 81       	ldd	r18, Y+4	; 0x04
     c22:	3d 81       	ldd	r19, Y+5	; 0x05
     c24:	f9 01       	movw	r30, r18
     c26:	22 81       	ldd	r18, Z+2	; 0x02
     c28:	22 2f       	mov	r18, r18
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	00 24       	eor	r0, r0
     c2e:	36 95       	lsr	r19
     c30:	27 95       	ror	r18
     c32:	07 94       	ror	r0
     c34:	36 95       	lsr	r19
     c36:	27 95       	ror	r18
     c38:	07 94       	ror	r0
     c3a:	32 2f       	mov	r19, r18
     c3c:	20 2d       	mov	r18, r0
     c3e:	24 2b       	or	r18, r20
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18

			pinConfig.pinNumber = PIN_2;
     c44:	84 e0       	ldi	r24, 0x04	; 4
     c46:	89 83       	std	Y+1, r24	; 0x01
			
			MCAL_dio_init('b',&pinConfig);
     c48:	ce 01       	movw	r24, r28
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	bc 01       	movw	r22, r24
     c4e:	82 e6       	ldi	r24, 0x62	; 98
     c50:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>

			GP_IRQ_callback[2] = config->P_IRQ_callback;
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	9d 81       	ldd	r25, Y+5	; 0x05
     c58:	fc 01       	movw	r30, r24
     c5a:	83 81       	ldd	r24, Z+3	; 0x03
     c5c:	94 81       	ldd	r25, Z+4	; 0x04
     c5e:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <GP_IRQ_callback+0x5>
     c62:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <GP_IRQ_callback+0x4>
			
			if (config->extiEnable == EXTI_ENABLE){
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	9d 81       	ldd	r25, Y+5	; 0x05
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	51 f4       	brne	.+20     	; 0xc86 <MCAL_EXTI_init+0x1b4>
				SET_BIT(GICR,6);
     c72:	8b e5       	ldi	r24, 0x5B	; 91
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	2b e5       	ldi	r18, 0x5B	; 91
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	20 64       	ori	r18, 0x40	; 64
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,6);
			}
			
			break;
     c84:	16 c0       	rjmp	.+44     	; 0xcb2 <MCAL_EXTI_init+0x1e0>

			GP_IRQ_callback[2] = config->P_IRQ_callback;
			
			if (config->extiEnable == EXTI_ENABLE){
				SET_BIT(GICR,6);
				} else if (config->extiEnable == EXTI_DISABLE){
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	81 f4       	brne	.+32     	; 0xcb2 <MCAL_EXTI_init+0x1e0>
				CLEAR_BIT(GICR,6);
     c92:	8b e5       	ldi	r24, 0x5B	; 91
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	2b e5       	ldi	r18, 0x5B	; 91
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	f9 01       	movw	r30, r18
     c9c:	20 81       	ld	r18, Z
     c9e:	2f 7b       	andi	r18, 0xBF	; 191
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
			}
			
			break;
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <MCAL_EXTI_init+0x1e0>
		}
		
		default:
		return EXTI_INIT_ERROR;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <MCAL_EXTI_init+0x1e4>
				SET_BIT(GICR,6);
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,6);
			}
			
			break;
     caa:	00 00       	nop
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <MCAL_EXTI_init+0x1e2>
				SET_BIT(GICR,7);
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,7);
			}
			
			break;
     cae:	00 00       	nop
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <MCAL_EXTI_init+0x1e2>
				SET_BIT(GICR,6);
				} else if (config->extiEnable == EXTI_DISABLE){
				CLEAR_BIT(GICR,6);
			}
			
			break;
     cb2:	00 00       	nop
		return EXTI_INIT_ERROR;
		
	}
	
	
	return EXTI_OK;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <__vector_1>:


ISR(EXT_INT_0){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_callback[0]();
     cf2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <GP_IRQ_callback>
     cf6:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <GP_IRQ_callback+0x1>
     cfa:	fc 01       	movw	r30, r24
     cfc:	09 95       	icall
}
     cfe:	00 00       	nop
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_2>:

ISR(EXT_INT_1){
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_callback[1]();
     d54:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <GP_IRQ_callback+0x2>
     d58:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <GP_IRQ_callback+0x3>
     d5c:	fc 01       	movw	r30, r24
     d5e:	09 95       	icall
}
     d60:	00 00       	nop
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	bf 91       	pop	r27
     d6c:	af 91       	pop	r26
     d6e:	9f 91       	pop	r25
     d70:	8f 91       	pop	r24
     d72:	7f 91       	pop	r23
     d74:	6f 91       	pop	r22
     d76:	5f 91       	pop	r21
     d78:	4f 91       	pop	r20
     d7a:	3f 91       	pop	r19
     d7c:	2f 91       	pop	r18
     d7e:	0f 90       	pop	r0
     d80:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d84:	0f 90       	pop	r0
     d86:	1f 90       	pop	r1
     d88:	18 95       	reti

00000d8a <__vector_3>:

ISR(EXT_INT_2){
     d8a:	1f 92       	push	r1
     d8c:	0f 92       	push	r0
     d8e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	GP_IRQ_callback[2]();
     db6:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <GP_IRQ_callback+0x4>
     dba:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <GP_IRQ_callback+0x5>
     dbe:	fc 01       	movw	r30, r24
     dc0:	09 95       	icall
     dc2:	00 00       	nop
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	0f 90       	pop	r0
     de2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <MCAL_pwm_init>:
pwm_config_t g_pwm[3];
	



pwm_status_t MCAL_pwm_init(pwm_config_t * config){
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <MCAL_pwm_init+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
		
		switch(config->pwmNumber){
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	e9 f1       	breq	.+122    	; 0xe86 <MCAL_pwm_init+0x9a>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f4       	brne	.+2      	; 0xe14 <MCAL_pwm_init+0x28>
     e12:	80 c0       	rjmp	.+256    	; 0xf14 <MCAL_pwm_init+0x128>
     e14:	89 2b       	or	r24, r25
     e16:	09 f0       	breq	.+2      	; 0xe1a <MCAL_pwm_init+0x2e>
     e18:	b3 c0       	rjmp	.+358    	; 0xf80 <MCAL_pwm_init+0x194>
		case PWM_NUMBER_0:{
			//Save a copy of configuration
			g_pwm[0] = *config;
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	fc 01       	movw	r30, r24
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	a2 81       	ldd	r26, Z+2	; 0x02
     e26:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <g_pwm>
     e2a:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <g_pwm+0x1>
     e2e:	a0 93 a1 00 	sts	0x00A1, r26	; 0x8000a1 <g_pwm+0x2>
			
			//Configuring OC0
			pin.pinNumber = PIN_3;
     e32:	88 e0       	ldi	r24, 0x08	; 8
     e34:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pin>
				
			MCAL_dio_init(PWM0_PORT, &pin);
     e38:	68 e7       	ldi	r22, 0x78	; 120
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	82 e6       	ldi	r24, 0x62	; 98
     e3e:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			//Configuring the clock source 
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	fc 01       	movw	r30, r24
     e48:	81 81       	ldd	r24, Z+1	; 0x01
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	71 f4       	brne	.+28     	; 0xe6a <MCAL_pwm_init+0x7e>
				TCCR0 |= config->prescaler;
     e4e:	83 e5       	ldi	r24, 0x53	; 83
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	23 e5       	ldi	r18, 0x53	; 83
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	f9 01       	movw	r30, r18
     e58:	40 81       	ld	r20, Z
     e5a:	29 81       	ldd	r18, Y+1	; 0x01
     e5c:	3a 81       	ldd	r19, Y+2	; 0x02
     e5e:	f9 01       	movw	r30, r18
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	24 2b       	or	r18, r20
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
			} else{
				TCCR0 |= config->clkSource;
			}
			
			break;
     e68:	8d c0       	rjmp	.+282    	; 0xf84 <MCAL_pwm_init+0x198>
			
			//Configuring the clock source 
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
				TCCR0 |= config->prescaler;
			} else{
				TCCR0 |= config->clkSource;
     e6a:	83 e5       	ldi	r24, 0x53	; 83
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	23 e5       	ldi	r18, 0x53	; 83
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	f9 01       	movw	r30, r18
     e74:	40 81       	ld	r20, Z
     e76:	29 81       	ldd	r18, Y+1	; 0x01
     e78:	3a 81       	ldd	r19, Y+2	; 0x02
     e7a:	f9 01       	movw	r30, r18
     e7c:	21 81       	ldd	r18, Z+1	; 0x01
     e7e:	24 2b       	or	r18, r20
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
			}
			
			break;
     e84:	7f c0       	rjmp	.+254    	; 0xf84 <MCAL_pwm_init+0x198>
		}
		
		case PWM_NUMBER_1:{
			//Save a copy of configuration
			g_pwm[1] = *config;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	a2 81       	ldd	r26, Z+2	; 0x02
     e92:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <g_pwm+0x3>
     e96:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <g_pwm+0x4>
     e9a:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <g_pwm+0x5>
			
			
			pin.pinNumber = PIN_5;
     e9e:	80 e2       	ldi	r24, 0x20	; 32
     ea0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pin>
				
			MCAL_dio_init(PWM1_PORT, &pin);
     ea4:	68 e7       	ldi	r22, 0x78	; 120
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	84 e6       	ldi	r24, 0x64	; 100
     eaa:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			pin.pinNumber = PIN_4;
     eae:	80 e1       	ldi	r24, 0x10	; 16
     eb0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pin>
			
			MCAL_dio_init(PWM1_PORT, &pin);
     eb4:	68 e7       	ldi	r22, 0x78	; 120
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	84 e6       	ldi	r24, 0x64	; 100
     eba:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			TCNT1H = 0xFF;
     ebe:	8d e4       	ldi	r24, 0x4D	; 77
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2f ef       	ldi	r18, 0xFF	; 255
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
			TCNT1L = 0x00;
     ec8:	8c e4       	ldi	r24, 0x4C	; 76
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	fc 01       	movw	r30, r24
     ece:	10 82       	st	Z, r1
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	fc 01       	movw	r30, r24
     ed6:	81 81       	ldd	r24, Z+1	; 0x01
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	71 f4       	brne	.+28     	; 0xef8 <MCAL_pwm_init+0x10c>
				TCCR1B |= config->prescaler;
     edc:	8e e4       	ldi	r24, 0x4E	; 78
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	2e e4       	ldi	r18, 0x4E	; 78
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	f9 01       	movw	r30, r18
     ee6:	40 81       	ld	r20, Z
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	f9 01       	movw	r30, r18
     eee:	22 81       	ldd	r18, Z+2	; 0x02
     ef0:	24 2b       	or	r18, r20
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
				} else{
				TCCR1B |= config->clkSource;
			}
			
			break;
     ef6:	46 c0       	rjmp	.+140    	; 0xf84 <MCAL_pwm_init+0x198>
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
				TCCR1B |= config->prescaler;
				} else{
				TCCR1B |= config->clkSource;
     ef8:	8e e4       	ldi	r24, 0x4E	; 78
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	2e e4       	ldi	r18, 0x4E	; 78
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	f9 01       	movw	r30, r18
     f02:	40 81       	ld	r20, Z
     f04:	29 81       	ldd	r18, Y+1	; 0x01
     f06:	3a 81       	ldd	r19, Y+2	; 0x02
     f08:	f9 01       	movw	r30, r18
     f0a:	21 81       	ldd	r18, Z+1	; 0x01
     f0c:	24 2b       	or	r18, r20
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
			}
			
			break;
     f12:	38 c0       	rjmp	.+112    	; 0xf84 <MCAL_pwm_init+0x198>
		}
		
		case PWM_NUMBER_2:{
			//Save a copy of configuration
			g_pwm[2] = *config;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	fc 01       	movw	r30, r24
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	a2 81       	ldd	r26, Z+2	; 0x02
     f20:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <g_pwm+0x6>
     f24:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <g_pwm+0x7>
     f28:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <g_pwm+0x8>
			
			//Configuring OC2
			pin.pinNumber = PIN_7;
     f2c:	80 e8       	ldi	r24, 0x80	; 128
     f2e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <pin>
			
			MCAL_dio_init(PWM2_PORT, &pin);
     f32:	68 e7       	ldi	r22, 0x78	; 120
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	84 e6       	ldi	r24, 0x64	; 100
     f38:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	81 81       	ldd	r24, Z+1	; 0x01
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	71 f4       	brne	.+28     	; 0xf64 <MCAL_pwm_init+0x178>
				TCCR2 |= config->prescaler;
     f48:	85 e4       	ldi	r24, 0x45	; 69
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	25 e4       	ldi	r18, 0x45	; 69
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	f9 01       	movw	r30, r18
     f52:	40 81       	ld	r20, Z
     f54:	29 81       	ldd	r18, Y+1	; 0x01
     f56:	3a 81       	ldd	r19, Y+2	; 0x02
     f58:	f9 01       	movw	r30, r18
     f5a:	22 81       	ldd	r18, Z+2	; 0x02
     f5c:	24 2b       	or	r18, r20
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
				} else{
				TCCR2 |= config->clkSource;
			}
			
			break;
     f62:	10 c0       	rjmp	.+32     	; 0xf84 <MCAL_pwm_init+0x198>
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
				TCCR2 |= config->prescaler;
				} else{
				TCCR2 |= config->clkSource;
     f64:	85 e4       	ldi	r24, 0x45	; 69
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	25 e4       	ldi	r18, 0x45	; 69
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	f9 01       	movw	r30, r18
     f6e:	40 81       	ld	r20, Z
     f70:	29 81       	ldd	r18, Y+1	; 0x01
     f72:	3a 81       	ldd	r19, Y+2	; 0x02
     f74:	f9 01       	movw	r30, r18
     f76:	21 81       	ldd	r18, Z+1	; 0x01
     f78:	24 2b       	or	r18, r20
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
			}
			
			break;
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <MCAL_pwm_init+0x198>
		}
			
		
		default:
			return PWM_INIT_ERROR;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <MCAL_pwm_init+0x19c>
			break;
	}
	
	sei();
     f84:	78 94       	sei
	
	return PWM_OK;
     f86:	80 e0       	ldi	r24, 0x00	; 0
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <MCAL_pwm_set_duty_cycle>:


void MCAL_pwm_set_duty_cycle(uint8_t pwmX, uint32_t value){
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <MCAL_pwm_set_duty_cycle+0xe>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <MCAL_pwm_set_duty_cycle+0x10>
     fa2:	1f 92       	push	r1
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	4a 83       	std	Y+2, r20	; 0x02
     fac:	5b 83       	std	Y+3, r21	; 0x03
     fae:	6c 83       	std	Y+4, r22	; 0x04
     fb0:	7d 83       	std	Y+5, r23	; 0x05
	
	if (value > MAX_PERCENTAGE || value < MIN_PERCENTAGE){
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	ac 81       	ldd	r26, Y+4	; 0x04
     fb8:	bd 81       	ldd	r27, Y+5	; 0x05
     fba:	85 36       	cpi	r24, 0x65	; 101
     fbc:	91 05       	cpc	r25, r1
     fbe:	a1 05       	cpc	r26, r1
     fc0:	b1 05       	cpc	r27, r1
     fc2:	20 f0       	brcs	.+8      	; 0xfcc <MCAL_pwm_set_duty_cycle+0x3a>
		value = 0;
     fc4:	1a 82       	std	Y+2, r1	; 0x02
     fc6:	1b 82       	std	Y+3, r1	; 0x03
     fc8:	1c 82       	std	Y+4, r1	; 0x04
     fca:	1d 82       	std	Y+5, r1	; 0x05
	}
	
	value = (uint32_t)ceil((double)(MAX_DUTY_VALUE * ((double)((double)value/100))));
     fcc:	6a 81       	ldd	r22, Y+2	; 0x02
     fce:	7b 81       	ldd	r23, Y+3	; 0x03
     fd0:	8c 81       	ldd	r24, Y+4	; 0x04
     fd2:	9d 81       	ldd	r25, Y+5	; 0x05
     fd4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__floatunsisf>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	48 ec       	ldi	r20, 0xC8	; 200
     fe2:	52 e4       	ldi	r21, 0x42	; 66
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	48 ec       	ldi	r20, 0xC8	; 200
     ff6:	52 e4       	ldi	r21, 0x42	; 66
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 c3 10 	call	0x2186	; 0x2186 <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <ceil>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 77 0f 	call	0x1eee	; 0x1eee <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9b 83       	std	Y+3, r25	; 0x03
    1020:	ac 83       	std	Y+4, r26	; 0x04
    1022:	bd 83       	std	Y+5, r27	; 0x05
	value = MAX_DUTY_VALUE - value;
    1024:	24 e6       	ldi	r18, 0x64	; 100
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	9b 81       	ldd	r25, Y+3	; 0x03
    1030:	ac 81       	ldd	r26, Y+4	; 0x04
    1032:	bd 81       	ldd	r27, Y+5	; 0x05
    1034:	79 01       	movw	r14, r18
    1036:	8a 01       	movw	r16, r20
    1038:	e8 1a       	sub	r14, r24
    103a:	f9 0a       	sbc	r15, r25
    103c:	0a 0b       	sbc	r16, r26
    103e:	1b 0b       	sbc	r17, r27
    1040:	d8 01       	movw	r26, r16
    1042:	c7 01       	movw	r24, r14
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	9b 83       	std	Y+3, r25	; 0x03
    1048:	ac 83       	std	Y+4, r26	; 0x04
    104a:	bd 83       	std	Y+5, r27	; 0x05
	
	switch(pwmX){
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	31 f1       	breq	.+76     	; 0x10a4 <MCAL_pwm_set_duty_cycle+0x112>
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	09 f4       	brne	.+2      	; 0x1060 <MCAL_pwm_set_duty_cycle+0xce>
    105e:	41 c0       	rjmp	.+130    	; 0x10e2 <MCAL_pwm_set_duty_cycle+0x150>
    1060:	89 2b       	or	r24, r25
    1062:	09 f0       	breq	.+2      	; 0x1066 <MCAL_pwm_set_duty_cycle+0xd4>
			CLEAR_BIT(TIFR, 6);
			
			break;
			
		default:
		break;
    1064:	5d c0       	rjmp	.+186    	; 0x1120 <MCAL_pwm_set_duty_cycle+0x18e>
	value = (uint32_t)ceil((double)(MAX_DUTY_VALUE * ((double)((double)value/100))));
	value = MAX_DUTY_VALUE - value;
	
	switch(pwmX){
		case PWM_NUMBER_0:
			g_duty_value[0] = value;
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	ac 81       	ldd	r26, Y+4	; 0x04
    106c:	bd 81       	ldd	r27, Y+5	; 0x05
    106e:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <g_duty_value>
    1072:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <g_duty_value+0x1>
    1076:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <g_duty_value+0x2>
    107a:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <g_duty_value+0x3>
			//Configuring the Interrupt
			TIMSK |= (1 << 0);
    107e:	89 e5       	ldi	r24, 0x59	; 89
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	29 e5       	ldi	r18, 0x59	; 89
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	21 60       	ori	r18, 0x01	; 1
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
			CLEAR_BIT(TIFR, 0);
    1090:	88 e5       	ldi	r24, 0x58	; 88
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	28 e5       	ldi	r18, 0x58	; 88
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	f9 01       	movw	r30, r18
    109a:	20 81       	ld	r18, Z
    109c:	2e 7f       	andi	r18, 0xFE	; 254
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
			break;
    10a2:	3e c0       	rjmp	.+124    	; 0x1120 <MCAL_pwm_set_duty_cycle+0x18e>
		
		case PWM_NUMBER_1:
			g_duty_value[1] = value;
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	ac 81       	ldd	r26, Y+4	; 0x04
    10aa:	bd 81       	ldd	r27, Y+5	; 0x05
    10ac:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <g_duty_value+0x4>
    10b0:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <g_duty_value+0x5>
    10b4:	a0 93 93 00 	sts	0x0093, r26	; 0x800093 <g_duty_value+0x6>
    10b8:	b0 93 94 00 	sts	0x0094, r27	; 0x800094 <g_duty_value+0x7>
			//Configuring the Interrupt
			TIMSK |= (1 << 2);
    10bc:	89 e5       	ldi	r24, 0x59	; 89
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	29 e5       	ldi	r18, 0x59	; 89
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	f9 01       	movw	r30, r18
    10c6:	20 81       	ld	r18, Z
    10c8:	24 60       	ori	r18, 0x04	; 4
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
			
			CLEAR_BIT(TIFR,2);
    10ce:	88 e5       	ldi	r24, 0x58	; 88
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	28 e5       	ldi	r18, 0x58	; 88
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	2b 7f       	andi	r18, 0xFB	; 251
    10dc:	fc 01       	movw	r30, r24
    10de:	20 83       	st	Z, r18
			break;
    10e0:	1f c0       	rjmp	.+62     	; 0x1120 <MCAL_pwm_set_duty_cycle+0x18e>
			
		case PWM_NUMBER_2:
			g_duty_value[2] = value;
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	ac 81       	ldd	r26, Y+4	; 0x04
    10e8:	bd 81       	ldd	r27, Y+5	; 0x05
    10ea:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <g_duty_value+0x8>
    10ee:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <g_duty_value+0x9>
    10f2:	a0 93 97 00 	sts	0x0097, r26	; 0x800097 <g_duty_value+0xa>
    10f6:	b0 93 98 00 	sts	0x0098, r27	; 0x800098 <g_duty_value+0xb>
			//Configuring the Interrupt
			TIMSK |= (1 << 6);
    10fa:	89 e5       	ldi	r24, 0x59	; 89
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	29 e5       	ldi	r18, 0x59	; 89
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	20 64       	ori	r18, 0x40	; 64
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
			
			CLEAR_BIT(TIFR, 6);
    110c:	88 e5       	ldi	r24, 0x58	; 88
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	28 e5       	ldi	r18, 0x58	; 88
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	f9 01       	movw	r30, r18
    1116:	20 81       	ld	r18, Z
    1118:	2f 7b       	andi	r18, 0xBF	; 191
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
			
			break;
    111e:	00 00       	nop
		break;
	}
	
	
		
}
    1120:	00 00       	nop
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	08 95       	ret

0000113a <__vector_11>:


ISR(TIMER0_OVF_vect){
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1142:	0f 92       	push	r0
    1144:	11 24       	eor	r1, r1
    1146:	2f 93       	push	r18
    1148:	3f 93       	push	r19
    114a:	4f 93       	push	r20
    114c:	5f 93       	push	r21
    114e:	6f 93       	push	r22
    1150:	7f 93       	push	r23
    1152:	8f 93       	push	r24
    1154:	9f 93       	push	r25
    1156:	af 93       	push	r26
    1158:	bf 93       	push	r27
    115a:	ef 93       	push	r30
    115c:	ff 93       	push	r31
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	//TCNT0 = -16;
	
	g_counter[0] += 1;
    1166:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <g_counter>
    116a:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <g_counter+0x1>
    116e:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <g_counter+0x2>
    1172:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <g_counter+0x3>
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	a1 1d       	adc	r26, r1
    117a:	b1 1d       	adc	r27, r1
    117c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <g_counter>
    1180:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <g_counter+0x1>
    1184:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <g_counter+0x2>
    1188:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <g_counter+0x3>
	
	if (g_duty_value[0] == MAX_DUTY_VALUE){
    118c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <g_duty_value>
    1190:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <g_duty_value+0x1>
    1194:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <g_duty_value+0x2>
    1198:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <g_duty_value+0x3>
    119c:	84 36       	cpi	r24, 0x64	; 100
    119e:	91 05       	cpc	r25, r1
    11a0:	a1 05       	cpc	r26, r1
    11a2:	b1 05       	cpc	r27, r1
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <__vector_11+0x78>
		MCAL_dio_write_pin(PWM0_PORT, PIN_3, LOW);
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	68 e0       	ldi	r22, 0x08	; 8
    11aa:	82 e6       	ldi	r24, 0x62	; 98
    11ac:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
    11b0:	35 c0       	rjmp	.+106    	; 0x121c <__vector_11+0xe2>
	} else if (g_counter[0] >= g_duty_value[0]){
    11b2:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <g_counter>
    11b6:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <g_counter+0x1>
    11ba:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <g_counter+0x2>
    11be:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <g_counter+0x3>
    11c2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <g_duty_value>
    11c6:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <g_duty_value+0x1>
    11ca:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <g_duty_value+0x2>
    11ce:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <g_duty_value+0x3>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	4a 07       	cpc	r20, r26
    11d8:	5b 07       	cpc	r21, r27
    11da:	d8 f0       	brcs	.+54     	; 0x1212 <__vector_11+0xd8>
		MCAL_dio_write_pin(PWM0_PORT, PIN_3, HIGH);
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	68 e0       	ldi	r22, 0x08	; 8
    11e0:	82 e6       	ldi	r24, 0x62	; 98
    11e2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		
		if (g_counter[0] == MAX_DUTY_VALUE){
    11e6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <g_counter>
    11ea:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <g_counter+0x1>
    11ee:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <g_counter+0x2>
    11f2:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <g_counter+0x3>
    11f6:	84 36       	cpi	r24, 0x64	; 100
    11f8:	91 05       	cpc	r25, r1
    11fa:	a1 05       	cpc	r26, r1
    11fc:	b1 05       	cpc	r27, r1
    11fe:	71 f4       	brne	.+28     	; 0x121c <__vector_11+0xe2>
			g_counter[0] = 0;
    1200:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <g_counter>
    1204:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <g_counter+0x1>
    1208:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <g_counter+0x2>
    120c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <g_counter+0x3>
    1210:	05 c0       	rjmp	.+10     	; 0x121c <__vector_11+0xe2>
		}
		
	}else{
		MCAL_dio_write_pin(PWM0_PORT, PIN_3, LOW);
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	68 e0       	ldi	r22, 0x08	; 8
    1216:	82 e6       	ldi	r24, 0x62	; 98
    1218:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	}
	
	CLEAR_BIT(TIFR, 0);
    121c:	88 e5       	ldi	r24, 0x58	; 88
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	28 e5       	ldi	r18, 0x58	; 88
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	f9 01       	movw	r30, r18
    1226:	20 81       	ld	r18, Z
    1228:	2e 7f       	andi	r18, 0xFE	; 254
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
	
}
    122e:	00 00       	nop
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	ff 91       	pop	r31
    1236:	ef 91       	pop	r30
    1238:	bf 91       	pop	r27
    123a:	af 91       	pop	r26
    123c:	9f 91       	pop	r25
    123e:	8f 91       	pop	r24
    1240:	7f 91       	pop	r23
    1242:	6f 91       	pop	r22
    1244:	5f 91       	pop	r21
    1246:	4f 91       	pop	r20
    1248:	3f 91       	pop	r19
    124a:	2f 91       	pop	r18
    124c:	0f 90       	pop	r0
    124e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1252:	0f 90       	pop	r0
    1254:	1f 90       	pop	r1
    1256:	18 95       	reti

00001258 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	TCNT1H = 0xFF;
    1284:	8d e4       	ldi	r24, 0x4D	; 77
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
	TCNT1L = 0x00;
    128e:	8c e4       	ldi	r24, 0x4C	; 76
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	fc 01       	movw	r30, r24
    1294:	10 82       	st	Z, r1
	
	g_counter[1] += 1;
    1296:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <g_counter+0x4>
    129a:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <g_counter+0x5>
    129e:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <g_counter+0x6>
    12a2:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <g_counter+0x7>
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	a1 1d       	adc	r26, r1
    12aa:	b1 1d       	adc	r27, r1
    12ac:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <g_counter+0x4>
    12b0:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <g_counter+0x5>
    12b4:	a0 93 87 00 	sts	0x0087, r26	; 0x800087 <g_counter+0x6>
    12b8:	b0 93 88 00 	sts	0x0088, r27	; 0x800088 <g_counter+0x7>
	
	if (g_duty_value[1] == MAX_DUTY_VALUE){
    12bc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <g_duty_value+0x4>
    12c0:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <g_duty_value+0x5>
    12c4:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <g_duty_value+0x6>
    12c8:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <g_duty_value+0x7>
    12cc:	84 36       	cpi	r24, 0x64	; 100
    12ce:	91 05       	cpc	r25, r1
    12d0:	a1 05       	cpc	r26, r1
    12d2:	b1 05       	cpc	r27, r1
    12d4:	59 f4       	brne	.+22     	; 0x12ec <__vector_9+0x94>
		MCAL_dio_write_pin(PWM1_PORT, PIN_5, LOW);
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	60 e2       	ldi	r22, 0x20	; 32
    12da:	84 e6       	ldi	r24, 0x64	; 100
    12dc:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		MCAL_dio_write_pin(PWM1_PORT, PIN_4, LOW);
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	60 e1       	ldi	r22, 0x10	; 16
    12e4:	84 e6       	ldi	r24, 0x64	; 100
    12e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <__vector_9+0x112>
		} else if (g_counter[1] >= g_duty_value[1]){
    12ec:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <g_counter+0x4>
    12f0:	30 91 86 00 	lds	r19, 0x0086	; 0x800086 <g_counter+0x5>
    12f4:	40 91 87 00 	lds	r20, 0x0087	; 0x800087 <g_counter+0x6>
    12f8:	50 91 88 00 	lds	r21, 0x0088	; 0x800088 <g_counter+0x7>
    12fc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <g_duty_value+0x4>
    1300:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <g_duty_value+0x5>
    1304:	a0 91 93 00 	lds	r26, 0x0093	; 0x800093 <g_duty_value+0x6>
    1308:	b0 91 94 00 	lds	r27, 0x0094	; 0x800094 <g_duty_value+0x7>
    130c:	28 17       	cp	r18, r24
    130e:	39 07       	cpc	r19, r25
    1310:	4a 07       	cpc	r20, r26
    1312:	5b 07       	cpc	r21, r27
    1314:	00 f1       	brcs	.+64     	; 0x1356 <__vector_9+0xfe>
		MCAL_dio_write_pin(PWM1_PORT, PIN_5, HIGH);
    1316:	41 e0       	ldi	r20, 0x01	; 1
    1318:	60 e2       	ldi	r22, 0x20	; 32
    131a:	84 e6       	ldi	r24, 0x64	; 100
    131c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		MCAL_dio_write_pin(PWM1_PORT, PIN_4, HIGH);
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	60 e1       	ldi	r22, 0x10	; 16
    1324:	84 e6       	ldi	r24, 0x64	; 100
    1326:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		
		if (g_counter[1] == MAX_DUTY_VALUE){
    132a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <g_counter+0x4>
    132e:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <g_counter+0x5>
    1332:	a0 91 87 00 	lds	r26, 0x0087	; 0x800087 <g_counter+0x6>
    1336:	b0 91 88 00 	lds	r27, 0x0088	; 0x800088 <g_counter+0x7>
    133a:	84 36       	cpi	r24, 0x64	; 100
    133c:	91 05       	cpc	r25, r1
    133e:	a1 05       	cpc	r26, r1
    1340:	b1 05       	cpc	r27, r1
    1342:	99 f4       	brne	.+38     	; 0x136a <__vector_9+0x112>
			g_counter[1] = 0;
    1344:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <g_counter+0x4>
    1348:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <g_counter+0x5>
    134c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <g_counter+0x6>
    1350:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <g_counter+0x7>
    1354:	0a c0       	rjmp	.+20     	; 0x136a <__vector_9+0x112>
		}
		
		}else{
		MCAL_dio_write_pin(PWM1_PORT, PIN_5, LOW);
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	60 e2       	ldi	r22, 0x20	; 32
    135a:	84 e6       	ldi	r24, 0x64	; 100
    135c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		MCAL_dio_write_pin(PWM1_PORT, PIN_4, LOW);
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	60 e1       	ldi	r22, 0x10	; 16
    1364:	84 e6       	ldi	r24, 0x64	; 100
    1366:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	}
	
	CLEAR_BIT(TIFR, 2);
    136a:	88 e5       	ldi	r24, 0x58	; 88
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	28 e5       	ldi	r18, 0x58	; 88
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	2b 7f       	andi	r18, 0xFB	; 251
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
	
}
    137c:	00 00       	nop
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    13a0:	0f 90       	pop	r0
    13a2:	1f 90       	pop	r1
    13a4:	18 95       	reti

000013a6 <__vector_5>:

ISR(TIMER2_OVF_vect){
    13a6:	1f 92       	push	r1
    13a8:	0f 92       	push	r0
    13aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    13ae:	0f 92       	push	r0
    13b0:	11 24       	eor	r1, r1
    13b2:	2f 93       	push	r18
    13b4:	3f 93       	push	r19
    13b6:	4f 93       	push	r20
    13b8:	5f 93       	push	r21
    13ba:	6f 93       	push	r22
    13bc:	7f 93       	push	r23
    13be:	8f 93       	push	r24
    13c0:	9f 93       	push	r25
    13c2:	af 93       	push	r26
    13c4:	bf 93       	push	r27
    13c6:	ef 93       	push	r30
    13c8:	ff 93       	push	r31
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = -16;
    13d2:	84 e4       	ldi	r24, 0x44	; 68
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	20 ef       	ldi	r18, 0xF0	; 240
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
	
	g_counter[2] += 1;
    13dc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <g_counter+0x8>
    13e0:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <g_counter+0x9>
    13e4:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <g_counter+0xa>
    13e8:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <g_counter+0xb>
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	b1 1d       	adc	r27, r1
    13f2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <g_counter+0x8>
    13f6:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <g_counter+0x9>
    13fa:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <g_counter+0xa>
    13fe:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <g_counter+0xb>
	
	if (g_duty_value[2] == MAX_DUTY_VALUE){
    1402:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <g_duty_value+0x8>
    1406:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <g_duty_value+0x9>
    140a:	a0 91 97 00 	lds	r26, 0x0097	; 0x800097 <g_duty_value+0xa>
    140e:	b0 91 98 00 	lds	r27, 0x0098	; 0x800098 <g_duty_value+0xb>
    1412:	84 36       	cpi	r24, 0x64	; 100
    1414:	91 05       	cpc	r25, r1
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	31 f4       	brne	.+12     	; 0x1428 <__vector_5+0x82>
		MCAL_dio_write_pin(PWM2_PORT, PIN_7, LOW);
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	60 e8       	ldi	r22, 0x80	; 128
    1420:	84 e6       	ldi	r24, 0x64	; 100
    1422:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
    1426:	35 c0       	rjmp	.+106    	; 0x1492 <__vector_5+0xec>
	} else if (g_counter[2] >= g_duty_value[2]){
    1428:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <g_counter+0x8>
    142c:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <g_counter+0x9>
    1430:	40 91 8b 00 	lds	r20, 0x008B	; 0x80008b <g_counter+0xa>
    1434:	50 91 8c 00 	lds	r21, 0x008C	; 0x80008c <g_counter+0xb>
    1438:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <g_duty_value+0x8>
    143c:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <g_duty_value+0x9>
    1440:	a0 91 97 00 	lds	r26, 0x0097	; 0x800097 <g_duty_value+0xa>
    1444:	b0 91 98 00 	lds	r27, 0x0098	; 0x800098 <g_duty_value+0xb>
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	4a 07       	cpc	r20, r26
    144e:	5b 07       	cpc	r21, r27
    1450:	d8 f0       	brcs	.+54     	; 0x1488 <__vector_5+0xe2>
		MCAL_dio_write_pin(PWM2_PORT, PIN_7, HIGH);
    1452:	41 e0       	ldi	r20, 0x01	; 1
    1454:	60 e8       	ldi	r22, 0x80	; 128
    1456:	84 e6       	ldi	r24, 0x64	; 100
    1458:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
		
		if (g_counter[2] == MAX_DUTY_VALUE){
    145c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <g_counter+0x8>
    1460:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <g_counter+0x9>
    1464:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <g_counter+0xa>
    1468:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <g_counter+0xb>
    146c:	84 36       	cpi	r24, 0x64	; 100
    146e:	91 05       	cpc	r25, r1
    1470:	a1 05       	cpc	r26, r1
    1472:	b1 05       	cpc	r27, r1
    1474:	71 f4       	brne	.+28     	; 0x1492 <__vector_5+0xec>
			g_counter[2] = 0;
    1476:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <g_counter+0x8>
    147a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <g_counter+0x9>
    147e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <g_counter+0xa>
    1482:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <g_counter+0xb>
    1486:	05 c0       	rjmp	.+10     	; 0x1492 <__vector_5+0xec>
		}
		
	}else{
		MCAL_dio_write_pin(PWM2_PORT, PIN_7, LOW);
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	60 e8       	ldi	r22, 0x80	; 128
    148c:	84 e6       	ldi	r24, 0x64	; 100
    148e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCAL_dio_write_pin>
	}
	
	CLEAR_BIT(TIFR, 6);
    1492:	88 e5       	ldi	r24, 0x58	; 88
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	28 e5       	ldi	r18, 0x58	; 88
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	2f 7b       	andi	r18, 0xBF	; 191
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
	
    14a4:	00 00       	nop
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	ff 91       	pop	r31
    14ac:	ef 91       	pop	r30
    14ae:	bf 91       	pop	r27
    14b0:	af 91       	pop	r26
    14b2:	9f 91       	pop	r25
    14b4:	8f 91       	pop	r24
    14b6:	7f 91       	pop	r23
    14b8:	6f 91       	pop	r22
    14ba:	5f 91       	pop	r21
    14bc:	4f 91       	pop	r20
    14be:	3f 91       	pop	r19
    14c0:	2f 91       	pop	r18
    14c2:	0f 90       	pop	r0
    14c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <MCAL_timer_init>:

timer_config_t timers[3];

uint16 get_prescaler(uint8_t index);

timer_status_t MCAL_timer_init(timer_config_t * config){
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	2b 97       	sbiw	r28, 0x0b	; 11
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	9b 87       	std	Y+11, r25	; 0x0b
    14e4:	8a 87       	std	Y+10, r24	; 0x0a
	switch(config->timerNumber){
    14e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <MCAL_timer_init+0x2c>
    14f8:	78 c0       	rjmp	.+240    	; 0x15ea <MCAL_timer_init+0x11c>
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <MCAL_timer_init+0x34>
    1500:	e0 c0       	rjmp	.+448    	; 0x16c2 <MCAL_timer_init+0x1f4>
    1502:	89 2b       	or	r24, r25
    1504:	09 f0       	breq	.+2      	; 0x1508 <MCAL_timer_init+0x3a>
    1506:	4d c1       	rjmp	.+666    	; 0x17a2 <MCAL_timer_init+0x2d4>
		case TIMER_NUMBER_0:{
			
			//Save a copy of the configurations
			timers[0] = *config; 
    1508:	8a 85       	ldd	r24, Y+10	; 0x0a
    150a:	9b 85       	ldd	r25, Y+11	; 0x0b
    150c:	27 e0       	ldi	r18, 0x07	; 7
    150e:	fc 01       	movw	r30, r24
    1510:	a8 ea       	ldi	r26, 0xA8	; 168
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	01 90       	ld	r0, Z+
    1516:	0d 92       	st	X+, r0
    1518:	2a 95       	dec	r18
    151a:	e1 f7       	brne	.-8      	; 0x1514 <MCAL_timer_init+0x46>
			
			//Configuring the timer mode
			TCCR0 |= config->mode;
    151c:	83 e5       	ldi	r24, 0x53	; 83
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	23 e5       	ldi	r18, 0x53	; 83
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	f9 01       	movw	r30, r18
    1526:	40 81       	ld	r20, Z
    1528:	2a 85       	ldd	r18, Y+10	; 0x0a
    152a:	3b 85       	ldd	r19, Y+11	; 0x0b
    152c:	f9 01       	movw	r30, r18
    152e:	21 81       	ldd	r18, Z+1	; 0x01
    1530:	24 2b       	or	r18, r20
    1532:	fc 01       	movw	r30, r24
    1534:	20 83       	st	Z, r18
			
			if (config->mode == TIMER_MODE_FAST_PWM_NON_INVERTING || config->mode == TIMER_MODE_FAST_PWM_INVERTING){
    1536:	8a 85       	ldd	r24, Y+10	; 0x0a
    1538:	9b 85       	ldd	r25, Y+11	; 0x0b
    153a:	fc 01       	movw	r30, r24
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	88 36       	cpi	r24, 0x68	; 104
    1540:	31 f0       	breq	.+12     	; 0x154e <MCAL_timer_init+0x80>
    1542:	8a 85       	ldd	r24, Y+10	; 0x0a
    1544:	9b 85       	ldd	r25, Y+11	; 0x0b
    1546:	fc 01       	movw	r30, r24
    1548:	81 81       	ldd	r24, Z+1	; 0x01
    154a:	88 37       	cpi	r24, 0x78	; 120
    154c:	61 f4       	brne	.+24     	; 0x1566 <MCAL_timer_init+0x98>
				pin_config_t pin;
				
				pin.portOptionEnable = PORT_OPTION_DISABLE;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8b 83       	std	Y+3, r24	; 0x03
				
				pin.dioDirection = OUTPUT_MODE;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	8a 83       	std	Y+2, r24	; 0x02
				
				pin.pinNumber = PIN_3;
    1556:	88 e0       	ldi	r24, 0x08	; 8
    1558:	89 83       	std	Y+1, r24	; 0x01
				
				MCAL_dio_init('b', &pin);
    155a:	ce 01       	movw	r24, r28
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	bc 01       	movw	r22, r24
    1560:	82 e6       	ldi	r24, 0x62	; 98
    1562:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			}
			
			//Configuring the clock source 
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
    1566:	8a 85       	ldd	r24, Y+10	; 0x0a
    1568:	9b 85       	ldd	r25, Y+11	; 0x0b
    156a:	fc 01       	movw	r30, r24
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	71 f4       	brne	.+28     	; 0x158e <MCAL_timer_init+0xc0>
				TCCR0 |= config->prescaler;
    1572:	83 e5       	ldi	r24, 0x53	; 83
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	23 e5       	ldi	r18, 0x53	; 83
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	f9 01       	movw	r30, r18
    157c:	40 81       	ld	r20, Z
    157e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1580:	3b 85       	ldd	r19, Y+11	; 0x0b
    1582:	f9 01       	movw	r30, r18
    1584:	23 81       	ldd	r18, Z+3	; 0x03
    1586:	24 2b       	or	r18, r20
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <MCAL_timer_init+0xda>
			} else{
				TCCR0 |= config->clkSource;
    158e:	83 e5       	ldi	r24, 0x53	; 83
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	23 e5       	ldi	r18, 0x53	; 83
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	f9 01       	movw	r30, r18
    1598:	40 81       	ld	r20, Z
    159a:	2a 85       	ldd	r18, Y+10	; 0x0a
    159c:	3b 85       	ldd	r19, Y+11	; 0x0b
    159e:	f9 01       	movw	r30, r18
    15a0:	22 81       	ldd	r18, Z+2	; 0x02
    15a2:	24 2b       	or	r18, r20
    15a4:	fc 01       	movw	r30, r24
    15a6:	20 83       	st	Z, r18
			}
				
			//Configuring the interrupt
			if (config->interruptEnable != TIMER_INTERRUPT_DISABLE){
    15a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ac:	fc 01       	movw	r30, r24
    15ae:	84 81       	ldd	r24, Z+4	; 0x04
    15b0:	88 23       	and	r24, r24
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <MCAL_timer_init+0xe8>
    15b4:	f8 c0       	rjmp	.+496    	; 0x17a6 <MCAL_timer_init+0x2d8>
				if (config->interruptEnable == TIMER_OUTPUT_COMPARE_FLAG_INTERRUPT_ENABLE){
    15b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ba:	fc 01       	movw	r30, r24
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	51 f4       	brne	.+20     	; 0x15d6 <MCAL_timer_init+0x108>
					TIMSK |= (1 << 0);
    15c2:	89 e5       	ldi	r24, 0x59	; 89
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	29 e5       	ldi	r18, 0x59	; 89
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	21 60       	ori	r18, 0x01	; 1
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
					TIMSK |= (1 << 1);
				}
			}
			
			
			break;
    15d4:	e8 c0       	rjmp	.+464    	; 0x17a6 <MCAL_timer_init+0x2d8>
			//Configuring the interrupt
			if (config->interruptEnable != TIMER_INTERRUPT_DISABLE){
				if (config->interruptEnable == TIMER_OUTPUT_COMPARE_FLAG_INTERRUPT_ENABLE){
					TIMSK |= (1 << 0);
				} else {
					TIMSK |= (1 << 1);
    15d6:	89 e5       	ldi	r24, 0x59	; 89
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	29 e5       	ldi	r18, 0x59	; 89
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	f9 01       	movw	r30, r18
    15e0:	20 81       	ld	r18, Z
    15e2:	22 60       	ori	r18, 0x02	; 2
    15e4:	fc 01       	movw	r30, r24
    15e6:	20 83       	st	Z, r18
				}
			}
			
			
			break;
    15e8:	de c0       	rjmp	.+444    	; 0x17a6 <MCAL_timer_init+0x2d8>
		}
		
		case TIMER_NUMBER_1:{
			//Save a copy of the configurations
			timers[1] = *config;
    15ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ee:	27 e0       	ldi	r18, 0x07	; 7
    15f0:	fc 01       	movw	r30, r24
    15f2:	af ea       	ldi	r26, 0xAF	; 175
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	01 90       	ld	r0, Z+
    15f8:	0d 92       	st	X+, r0
    15fa:	2a 95       	dec	r18
    15fc:	e1 f7       	brne	.-8      	; 0x15f6 <MCAL_timer_init+0x128>
			
			//Configuring the timer mode
			switch (config->mode){
    15fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1600:	9b 85       	ldd	r25, Y+11	; 0x0b
    1602:	fc 01       	movw	r30, r24
    1604:	81 81       	ldd	r24, Z+1	; 0x01
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	f1 f0       	breq	.+60     	; 0x164a <MCAL_timer_init+0x17c>
    160e:	45 97       	sbiw	r24, 0x15	; 21
    1610:	21 f5       	brne	.+72     	; 0x165a <MCAL_timer_init+0x18c>
				case TIMER1_MODE_FAST_PWM_NON_INVERTING_8_BIT :
					//For enabling PWM 8 bit mode 
					TCCR1A |= (1 << 0);
    1612:	8f e4       	ldi	r24, 0x4F	; 79
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	2f e4       	ldi	r18, 0x4F	; 79
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	f9 01       	movw	r30, r18
    161c:	20 81       	ld	r18, Z
    161e:	21 60       	ori	r18, 0x01	; 1
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
					TCCR1B |= (1 << 3);
    1624:	8e e4       	ldi	r24, 0x4E	; 78
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	2e e4       	ldi	r18, 0x4E	; 78
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	20 81       	ld	r18, Z
    1630:	28 60       	ori	r18, 0x08	; 8
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
					/*For Clearing OC1A on compare match, set
					OC1A at BOTTOM, (non-inverting mode)*/
					TCCR1A |= (2 << 6);
    1636:	8f e4       	ldi	r24, 0x4F	; 79
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	2f e4       	ldi	r18, 0x4F	; 79
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f9 01       	movw	r30, r18
    1640:	20 81       	ld	r18, Z
    1642:	20 68       	ori	r18, 0x80	; 128
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
					break;
    1648:	08 c0       	rjmp	.+16     	; 0x165a <MCAL_timer_init+0x18c>
					
				case TIMER_MODE_NORMAL:
					TCCR1A = 0x00;
    164a:	8f e4       	ldi	r24, 0x4F	; 79
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	fc 01       	movw	r30, r24
    1650:	10 82       	st	Z, r1
					TCCR1B = 0x00;
    1652:	8e e4       	ldi	r24, 0x4E	; 78
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	fc 01       	movw	r30, r24
    1658:	10 82       	st	Z, r1
			}
			
			if (config->mode == TIMER1_MODE_FAST_PWM_NON_INVERTING_8_BIT){
    165a:	8a 85       	ldd	r24, Y+10	; 0x0a
    165c:	9b 85       	ldd	r25, Y+11	; 0x0b
    165e:	fc 01       	movw	r30, r24
    1660:	81 81       	ldd	r24, Z+1	; 0x01
    1662:	85 31       	cpi	r24, 0x15	; 21
    1664:	61 f4       	brne	.+24     	; 0x167e <MCAL_timer_init+0x1b0>
				pin_config_t pin;
				
				pin.portOptionEnable = PORT_OPTION_DISABLE;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	8e 83       	std	Y+6, r24	; 0x06
				
				pin.dioDirection = OUTPUT_MODE;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8d 83       	std	Y+5, r24	; 0x05
				
				pin.pinNumber = PIN_5;
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	8c 83       	std	Y+4, r24	; 0x04
				
				MCAL_dio_init('d', &pin);
    1672:	ce 01       	movw	r24, r28
    1674:	04 96       	adiw	r24, 0x04	; 4
    1676:	bc 01       	movw	r22, r24
    1678:	84 e6       	ldi	r24, 0x64	; 100
    167a:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			}
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	9b 85       	ldd	r25, Y+11	; 0x0b
    1682:	fc 01       	movw	r30, r24
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	71 f4       	brne	.+28     	; 0x16a6 <MCAL_timer_init+0x1d8>
				TCCR1B |= config->prescaler;
    168a:	8e e4       	ldi	r24, 0x4E	; 78
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	2e e4       	ldi	r18, 0x4E	; 78
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	f9 01       	movw	r30, r18
    1694:	40 81       	ld	r20, Z
    1696:	2a 85       	ldd	r18, Y+10	; 0x0a
    1698:	3b 85       	ldd	r19, Y+11	; 0x0b
    169a:	f9 01       	movw	r30, r18
    169c:	23 81       	ldd	r18, Z+3	; 0x03
    169e:	24 2b       	or	r18, r20
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
				TCCR1B |= config->clkSource;
			}
			
			//Configuring the interrupt
			
			break;
    16a4:	83 c0       	rjmp	.+262    	; 0x17ac <MCAL_timer_init+0x2de>
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
				TCCR1B |= config->prescaler;
				} else{
				TCCR1B |= config->clkSource;
    16a6:	8e e4       	ldi	r24, 0x4E	; 78
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	2e e4       	ldi	r18, 0x4E	; 78
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	f9 01       	movw	r30, r18
    16b0:	40 81       	ld	r20, Z
    16b2:	2a 85       	ldd	r18, Y+10	; 0x0a
    16b4:	3b 85       	ldd	r19, Y+11	; 0x0b
    16b6:	f9 01       	movw	r30, r18
    16b8:	22 81       	ldd	r18, Z+2	; 0x02
    16ba:	24 2b       	or	r18, r20
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
			}
			
			//Configuring the interrupt
			
			break;
    16c0:	75 c0       	rjmp	.+234    	; 0x17ac <MCAL_timer_init+0x2de>
		}
		
		case TIMER_NUMBER_2:{
			//Save a copy of the configurations
			timers[2] = *config;
    16c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16c6:	27 e0       	ldi	r18, 0x07	; 7
    16c8:	fc 01       	movw	r30, r24
    16ca:	a6 eb       	ldi	r26, 0xB6	; 182
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	01 90       	ld	r0, Z+
    16d0:	0d 92       	st	X+, r0
    16d2:	2a 95       	dec	r18
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <MCAL_timer_init+0x200>
			
			//Configuring the timer mode
			TCCR2 |= config->mode;
    16d6:	85 e4       	ldi	r24, 0x45	; 69
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	25 e4       	ldi	r18, 0x45	; 69
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	f9 01       	movw	r30, r18
    16e0:	40 81       	ld	r20, Z
    16e2:	2a 85       	ldd	r18, Y+10	; 0x0a
    16e4:	3b 85       	ldd	r19, Y+11	; 0x0b
    16e6:	f9 01       	movw	r30, r18
    16e8:	21 81       	ldd	r18, Z+1	; 0x01
    16ea:	24 2b       	or	r18, r20
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 83       	st	Z, r18
			
			if (config->mode == TIMER_MODE_FAST_PWM_NON_INVERTING || config->mode == TIMER_MODE_FAST_PWM_INVERTING){
    16f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f4:	fc 01       	movw	r30, r24
    16f6:	81 81       	ldd	r24, Z+1	; 0x01
    16f8:	88 36       	cpi	r24, 0x68	; 104
    16fa:	31 f0       	breq	.+12     	; 0x1708 <MCAL_timer_init+0x23a>
    16fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    16fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1700:	fc 01       	movw	r30, r24
    1702:	81 81       	ldd	r24, Z+1	; 0x01
    1704:	88 37       	cpi	r24, 0x78	; 120
    1706:	61 f4       	brne	.+24     	; 0x1720 <MCAL_timer_init+0x252>
				pin_config_t pin;
				
				pin.portOptionEnable = PORT_OPTION_DISABLE;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	89 87       	std	Y+9, r24	; 0x09
				
				pin.dioDirection = OUTPUT_MODE;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	88 87       	std	Y+8, r24	; 0x08
				
				pin.pinNumber = PIN_7;
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	8f 83       	std	Y+7, r24	; 0x07
				
				MCAL_dio_init('d', &pin);
    1714:	ce 01       	movw	r24, r28
    1716:	07 96       	adiw	r24, 0x07	; 7
    1718:	bc 01       	movw	r22, r24
    171a:	84 e6       	ldi	r24, 0x64	; 100
    171c:	0e 94 3f 04 	call	0x87e	; 0x87e <MCAL_dio_init>
			}
			
			//Configuring the clock source
			if (config->clkSource == TIMER_CLK_SOURCE_INTERNAL){
    1720:	8a 85       	ldd	r24, Y+10	; 0x0a
    1722:	9b 85       	ldd	r25, Y+11	; 0x0b
    1724:	fc 01       	movw	r30, r24
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	71 f4       	brne	.+28     	; 0x1748 <MCAL_timer_init+0x27a>
				TCCR2 |= config->prescaler;
    172c:	85 e4       	ldi	r24, 0x45	; 69
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	25 e4       	ldi	r18, 0x45	; 69
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	f9 01       	movw	r30, r18
    1736:	40 81       	ld	r20, Z
    1738:	2a 85       	ldd	r18, Y+10	; 0x0a
    173a:	3b 85       	ldd	r19, Y+11	; 0x0b
    173c:	f9 01       	movw	r30, r18
    173e:	23 81       	ldd	r18, Z+3	; 0x03
    1740:	24 2b       	or	r18, r20
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <MCAL_timer_init+0x294>
				} else{
				TCCR2 |= config->clkSource;
    1748:	85 e4       	ldi	r24, 0x45	; 69
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	25 e4       	ldi	r18, 0x45	; 69
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	f9 01       	movw	r30, r18
    1752:	40 81       	ld	r20, Z
    1754:	2a 85       	ldd	r18, Y+10	; 0x0a
    1756:	3b 85       	ldd	r19, Y+11	; 0x0b
    1758:	f9 01       	movw	r30, r18
    175a:	22 81       	ldd	r18, Z+2	; 0x02
    175c:	24 2b       	or	r18, r20
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
			}
			
			//Configuring the interrupt
			if (config->interruptEnable != TIMER_INTERRUPT_DISABLE){
    1762:	8a 85       	ldd	r24, Y+10	; 0x0a
    1764:	9b 85       	ldd	r25, Y+11	; 0x0b
    1766:	fc 01       	movw	r30, r24
    1768:	84 81       	ldd	r24, Z+4	; 0x04
    176a:	88 23       	and	r24, r24
    176c:	f1 f0       	breq	.+60     	; 0x17aa <MCAL_timer_init+0x2dc>
				if (config->interruptEnable == TIMER_OUTPUT_COMPARE_FLAG_INTERRUPT_ENABLE){
    176e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1770:	9b 85       	ldd	r25, Y+11	; 0x0b
    1772:	fc 01       	movw	r30, r24
    1774:	84 81       	ldd	r24, Z+4	; 0x04
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	51 f4       	brne	.+20     	; 0x178e <MCAL_timer_init+0x2c0>
					TIMSK |= (1 << 7);
    177a:	89 e5       	ldi	r24, 0x59	; 89
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	29 e5       	ldi	r18, 0x59	; 89
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	f9 01       	movw	r30, r18
    1784:	20 81       	ld	r18, Z
    1786:	20 68       	ori	r18, 0x80	; 128
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
					} else {
					TIMSK |= (1 << 6);
				}
			}
			
			break;
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <MCAL_timer_init+0x2dc>
			//Configuring the interrupt
			if (config->interruptEnable != TIMER_INTERRUPT_DISABLE){
				if (config->interruptEnable == TIMER_OUTPUT_COMPARE_FLAG_INTERRUPT_ENABLE){
					TIMSK |= (1 << 7);
					} else {
					TIMSK |= (1 << 6);
    178e:	89 e5       	ldi	r24, 0x59	; 89
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	29 e5       	ldi	r18, 0x59	; 89
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	f9 01       	movw	r30, r18
    1798:	20 81       	ld	r18, Z
    179a:	20 64       	ori	r18, 0x40	; 64
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
				}
			}
			
			break;
    17a0:	04 c0       	rjmp	.+8      	; 0x17aa <MCAL_timer_init+0x2dc>
		}
			
		
		default:
			return TIMER_INIT_ERROR;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <MCAL_timer_init+0x2e0>
					TIMSK |= (1 << 1);
				}
			}
			
			
			break;
    17a6:	00 00       	nop
    17a8:	01 c0       	rjmp	.+2      	; 0x17ac <MCAL_timer_init+0x2de>
					} else {
					TIMSK |= (1 << 6);
				}
			}
			
			break;
    17aa:	00 00       	nop
		default:
			return TIMER_INIT_ERROR;
			break;
	}
	
	return TIMER_OK;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
}
    17ae:	2b 96       	adiw	r28, 0x0b	; 11
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <MCAL_timer_delay_ms>:

void MCAL_timer_delay_ms(uint64_t delay){
    17c0:	2f 92       	push	r2
    17c2:	3f 92       	push	r3
    17c4:	4f 92       	push	r4
    17c6:	5f 92       	push	r5
    17c8:	6f 92       	push	r6
    17ca:	7f 92       	push	r7
    17cc:	8f 92       	push	r8
    17ce:	9f 92       	push	r9
    17d0:	af 92       	push	r10
    17d2:	bf 92       	push	r11
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	e6 97       	sbiw	r28, 0x36	; 54
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	2b a3       	std	Y+35, r18	; 0x23
    17f6:	3c a3       	std	Y+36, r19	; 0x24
    17f8:	4d a3       	std	Y+37, r20	; 0x25
    17fa:	5e a3       	std	Y+38, r21	; 0x26
    17fc:	6f a3       	std	Y+39, r22	; 0x27
    17fe:	78 a7       	std	Y+40, r23	; 0x28
    1800:	89 a7       	std	Y+41, r24	; 0x29
    1802:	9a a7       	std	Y+42, r25	; 0x2a
	
	delay *= FACTOR_MS_TO_US;
    1804:	8b a1       	ldd	r24, Y+35	; 0x23
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	9c a1       	ldd	r25, Y+36	; 0x24
    180a:	98 ab       	std	Y+48, r25	; 0x30
    180c:	ed a1       	ldd	r30, Y+37	; 0x25
    180e:	e9 ab       	std	Y+49, r30	; 0x31
    1810:	fe a1       	ldd	r31, Y+38	; 0x26
    1812:	fa ab       	std	Y+50, r31	; 0x32
    1814:	8f a1       	ldd	r24, Y+39	; 0x27
    1816:	8b ab       	std	Y+51, r24	; 0x33
    1818:	98 a5       	ldd	r25, Y+40	; 0x28
    181a:	9c ab       	std	Y+52, r25	; 0x34
    181c:	e9 a5       	ldd	r30, Y+41	; 0x29
    181e:	ed ab       	std	Y+53, r30	; 0x35
    1820:	fa a5       	ldd	r31, Y+42	; 0x2a
    1822:	fe ab       	std	Y+54, r31	; 0x36
    1824:	2f a4       	ldd	r2, Y+47	; 0x2f
    1826:	38 a8       	ldd	r3, Y+48	; 0x30
    1828:	49 a8       	ldd	r4, Y+49	; 0x31
    182a:	5a a8       	ldd	r5, Y+50	; 0x32
    182c:	6b a8       	ldd	r6, Y+51	; 0x33
    182e:	7c a8       	ldd	r7, Y+52	; 0x34
    1830:	8d a8       	ldd	r8, Y+53	; 0x35
    1832:	9e a8       	ldd	r9, Y+54	; 0x36
    1834:	22 2d       	mov	r18, r2
    1836:	33 2d       	mov	r19, r3
    1838:	44 2d       	mov	r20, r4
    183a:	55 2d       	mov	r21, r5
    183c:	66 2d       	mov	r22, r6
    183e:	77 2d       	mov	r23, r7
    1840:	88 2d       	mov	r24, r8
    1842:	99 2d       	mov	r25, r9
    1844:	02 e0       	ldi	r16, 0x02	; 2
    1846:	0e 94 95 11 	call	0x232a	; 0x232a <__ashldi3>
    184a:	a2 2e       	mov	r10, r18
    184c:	b3 2e       	mov	r11, r19
    184e:	c4 2e       	mov	r12, r20
    1850:	d5 2e       	mov	r13, r21
    1852:	e6 2e       	mov	r14, r22
    1854:	f7 2e       	mov	r15, r23
    1856:	08 2f       	mov	r16, r24
    1858:	19 2f       	mov	r17, r25
    185a:	2a 2c       	mov	r2, r10
    185c:	3b 2c       	mov	r3, r11
    185e:	4c 2c       	mov	r4, r12
    1860:	5d 2c       	mov	r5, r13
    1862:	6e 2c       	mov	r6, r14
    1864:	7f 2c       	mov	r7, r15
    1866:	80 2e       	mov	r8, r16
    1868:	91 2e       	mov	r9, r17
    186a:	22 2d       	mov	r18, r2
    186c:	33 2d       	mov	r19, r3
    186e:	44 2d       	mov	r20, r4
    1870:	55 2d       	mov	r21, r5
    1872:	66 2d       	mov	r22, r6
    1874:	77 2d       	mov	r23, r7
    1876:	88 2d       	mov	r24, r8
    1878:	99 2d       	mov	r25, r9
    187a:	05 e0       	ldi	r16, 0x05	; 5
    187c:	0e 94 95 11 	call	0x232a	; 0x232a <__ashldi3>
    1880:	a2 2e       	mov	r10, r18
    1882:	b3 2e       	mov	r11, r19
    1884:	c4 2e       	mov	r12, r20
    1886:	d5 2e       	mov	r13, r21
    1888:	e6 2e       	mov	r14, r22
    188a:	f7 2e       	mov	r15, r23
    188c:	08 2f       	mov	r16, r24
    188e:	19 2f       	mov	r17, r25
    1890:	2a 2d       	mov	r18, r10
    1892:	3b 2d       	mov	r19, r11
    1894:	4c 2d       	mov	r20, r12
    1896:	5d 2d       	mov	r21, r13
    1898:	6e 2d       	mov	r22, r14
    189a:	7f 2d       	mov	r23, r15
    189c:	80 2f       	mov	r24, r16
    189e:	91 2f       	mov	r25, r17
    18a0:	a2 2c       	mov	r10, r2
    18a2:	b3 2c       	mov	r11, r3
    18a4:	c4 2c       	mov	r12, r4
    18a6:	d5 2c       	mov	r13, r5
    18a8:	e6 2c       	mov	r14, r6
    18aa:	f7 2c       	mov	r15, r7
    18ac:	08 2d       	mov	r16, r8
    18ae:	19 2d       	mov	r17, r9
    18b0:	0e 94 c3 11 	call	0x2386	; 0x2386 <__subdi3>
    18b4:	a2 2e       	mov	r10, r18
    18b6:	b3 2e       	mov	r11, r19
    18b8:	c4 2e       	mov	r12, r20
    18ba:	d5 2e       	mov	r13, r21
    18bc:	e6 2e       	mov	r14, r22
    18be:	f7 2e       	mov	r15, r23
    18c0:	08 2f       	mov	r16, r24
    18c2:	19 2f       	mov	r17, r25
    18c4:	2a 2d       	mov	r18, r10
    18c6:	3b 2d       	mov	r19, r11
    18c8:	4c 2d       	mov	r20, r12
    18ca:	5d 2d       	mov	r21, r13
    18cc:	6e 2d       	mov	r22, r14
    18ce:	7f 2d       	mov	r23, r15
    18d0:	80 2f       	mov	r24, r16
    18d2:	91 2f       	mov	r25, r17
    18d4:	af a4       	ldd	r10, Y+47	; 0x2f
    18d6:	b8 a8       	ldd	r11, Y+48	; 0x30
    18d8:	c9 a8       	ldd	r12, Y+49	; 0x31
    18da:	da a8       	ldd	r13, Y+50	; 0x32
    18dc:	eb a8       	ldd	r14, Y+51	; 0x33
    18de:	fc a8       	ldd	r15, Y+52	; 0x34
    18e0:	0d a9       	ldd	r16, Y+53	; 0x35
    18e2:	1e a9       	ldd	r17, Y+54	; 0x36
    18e4:	0e 94 ae 11 	call	0x235c	; 0x235c <__adddi3>
    18e8:	a2 2e       	mov	r10, r18
    18ea:	b3 2e       	mov	r11, r19
    18ec:	c4 2e       	mov	r12, r20
    18ee:	d5 2e       	mov	r13, r21
    18f0:	e6 2e       	mov	r14, r22
    18f2:	f7 2e       	mov	r15, r23
    18f4:	08 2f       	mov	r16, r24
    18f6:	19 2f       	mov	r17, r25
    18f8:	2a 2d       	mov	r18, r10
    18fa:	3b 2d       	mov	r19, r11
    18fc:	4c 2d       	mov	r20, r12
    18fe:	5d 2d       	mov	r21, r13
    1900:	6e 2d       	mov	r22, r14
    1902:	7f 2d       	mov	r23, r15
    1904:	80 2f       	mov	r24, r16
    1906:	91 2f       	mov	r25, r17
    1908:	03 e0       	ldi	r16, 0x03	; 3
    190a:	0e 94 95 11 	call	0x232a	; 0x232a <__ashldi3>
    190e:	22 2e       	mov	r2, r18
    1910:	33 2e       	mov	r3, r19
    1912:	44 2e       	mov	r4, r20
    1914:	55 2e       	mov	r5, r21
    1916:	66 2e       	mov	r6, r22
    1918:	77 2e       	mov	r7, r23
    191a:	88 2e       	mov	r8, r24
    191c:	99 2e       	mov	r9, r25
    191e:	a2 2c       	mov	r10, r2
    1920:	b3 2c       	mov	r11, r3
    1922:	c4 2c       	mov	r12, r4
    1924:	d5 2c       	mov	r13, r5
    1926:	e6 2c       	mov	r14, r6
    1928:	f7 2c       	mov	r15, r7
    192a:	08 2d       	mov	r16, r8
    192c:	19 2d       	mov	r17, r9
    192e:	ab a2       	std	Y+35, r10	; 0x23
    1930:	bc a2       	std	Y+36, r11	; 0x24
    1932:	cd a2       	std	Y+37, r12	; 0x25
    1934:	de a2       	std	Y+38, r13	; 0x26
    1936:	ef a2       	std	Y+39, r14	; 0x27
    1938:	f8 a6       	std	Y+40, r15	; 0x28
    193a:	09 a7       	std	Y+41, r16	; 0x29
    193c:	1a a7       	std	Y+42, r17	; 0x2a
	
	uint16 prescaler = get_prescaler(timers[0].prescaler);
    193e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <timers+0x3>
    1942:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <get_prescaler>
    1946:	9a 87       	std	Y+10, r25	; 0x0a
    1948:	89 87       	std	Y+9, r24	; 0x09
	
	uint64_t Tticks = prescaler, Noverflows, overflowCount = 0;
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	9c 01       	movw	r18, r24
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	cb 01       	movw	r24, r22
    195a:	2b 87       	std	Y+11, r18	; 0x0b
    195c:	3c 87       	std	Y+12, r19	; 0x0c
    195e:	4d 87       	std	Y+13, r20	; 0x0d
    1960:	5e 87       	std	Y+14, r21	; 0x0e
    1962:	6f 87       	std	Y+15, r22	; 0x0f
    1964:	78 8b       	std	Y+16, r23	; 0x10
    1966:	89 8b       	std	Y+17, r24	; 0x11
    1968:	9a 8b       	std	Y+18, r25	; 0x12
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	1a 82       	std	Y+2, r1	; 0x02
    196e:	1b 82       	std	Y+3, r1	; 0x03
    1970:	1c 82       	std	Y+4, r1	; 0x04
    1972:	1d 82       	std	Y+5, r1	; 0x05
    1974:	1e 82       	std	Y+6, r1	; 0x06
    1976:	1f 82       	std	Y+7, r1	; 0x07
    1978:	18 86       	std	Y+8, r1	; 0x08
	uint64_t Tmax = Tticks * REGISTER_SIZE;
    197a:	2b 85       	ldd	r18, Y+11	; 0x0b
    197c:	3c 85       	ldd	r19, Y+12	; 0x0c
    197e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1980:	5e 85       	ldd	r21, Y+14	; 0x0e
    1982:	6f 85       	ldd	r22, Y+15	; 0x0f
    1984:	78 89       	ldd	r23, Y+16	; 0x10
    1986:	89 89       	ldd	r24, Y+17	; 0x11
    1988:	9a 89       	ldd	r25, Y+18	; 0x12
    198a:	08 e0       	ldi	r16, 0x08	; 8
    198c:	0e 94 95 11 	call	0x232a	; 0x232a <__ashldi3>
    1990:	a2 2e       	mov	r10, r18
    1992:	b3 2e       	mov	r11, r19
    1994:	c4 2e       	mov	r12, r20
    1996:	d5 2e       	mov	r13, r21
    1998:	e6 2e       	mov	r14, r22
    199a:	f7 2e       	mov	r15, r23
    199c:	08 2f       	mov	r16, r24
    199e:	19 2f       	mov	r17, r25
    19a0:	ab 8a       	std	Y+19, r10	; 0x13
    19a2:	bc 8a       	std	Y+20, r11	; 0x14
    19a4:	cd 8a       	std	Y+21, r12	; 0x15
    19a6:	de 8a       	std	Y+22, r13	; 0x16
    19a8:	ef 8a       	std	Y+23, r14	; 0x17
    19aa:	f8 8e       	std	Y+24, r15	; 0x18
    19ac:	09 8f       	std	Y+25, r16	; 0x19
    19ae:	1a 8f       	std	Y+26, r17	; 0x1a
	
	if (delay < Tmax){
    19b0:	ab a0       	ldd	r10, Y+35	; 0x23
    19b2:	bc a0       	ldd	r11, Y+36	; 0x24
    19b4:	cd a0       	ldd	r12, Y+37	; 0x25
    19b6:	de a0       	ldd	r13, Y+38	; 0x26
    19b8:	ef a0       	ldd	r14, Y+39	; 0x27
    19ba:	f8 a4       	ldd	r15, Y+40	; 0x28
    19bc:	09 a5       	ldd	r16, Y+41	; 0x29
    19be:	1a a5       	ldd	r17, Y+42	; 0x2a
    19c0:	2b 88       	ldd	r2, Y+19	; 0x13
    19c2:	3c 88       	ldd	r3, Y+20	; 0x14
    19c4:	4d 88       	ldd	r4, Y+21	; 0x15
    19c6:	5e 88       	ldd	r5, Y+22	; 0x16
    19c8:	6f 88       	ldd	r6, Y+23	; 0x17
    19ca:	78 8c       	ldd	r7, Y+24	; 0x18
    19cc:	89 8c       	ldd	r8, Y+25	; 0x19
    19ce:	9a 8c       	ldd	r9, Y+26	; 0x1a
    19d0:	2a 2d       	mov	r18, r10
    19d2:	3b 2d       	mov	r19, r11
    19d4:	4c 2d       	mov	r20, r12
    19d6:	5d 2d       	mov	r21, r13
    19d8:	6e 2d       	mov	r22, r14
    19da:	7f 2d       	mov	r23, r15
    19dc:	80 2f       	mov	r24, r16
    19de:	91 2f       	mov	r25, r17
    19e0:	a2 2c       	mov	r10, r2
    19e2:	b3 2c       	mov	r11, r3
    19e4:	c4 2c       	mov	r12, r4
    19e6:	d5 2c       	mov	r13, r5
    19e8:	e6 2c       	mov	r14, r6
    19ea:	f7 2c       	mov	r15, r7
    19ec:	08 2d       	mov	r16, r8
    19ee:	19 2d       	mov	r17, r9
    19f0:	0e 94 cc 11 	call	0x2398	; 0x2398 <__cmpdi2>
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <MCAL_timer_delay_ms+0x238>
    19f6:	51 c0       	rjmp	.+162    	; 0x1a9a <MCAL_timer_delay_ms+0x2da>
		TCNT0 = (Tmax - delay) / Tticks;
    19f8:	82 e5       	ldi	r24, 0x52	; 82
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9c a7       	std	Y+44, r25	; 0x2c
    19fe:	8b a7       	std	Y+43, r24	; 0x2b
    1a00:	2b 89       	ldd	r18, Y+19	; 0x13
    1a02:	3c 89       	ldd	r19, Y+20	; 0x14
    1a04:	4d 89       	ldd	r20, Y+21	; 0x15
    1a06:	5e 89       	ldd	r21, Y+22	; 0x16
    1a08:	6f 89       	ldd	r22, Y+23	; 0x17
    1a0a:	78 8d       	ldd	r23, Y+24	; 0x18
    1a0c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a10:	ab a0       	ldd	r10, Y+35	; 0x23
    1a12:	bc a0       	ldd	r11, Y+36	; 0x24
    1a14:	cd a0       	ldd	r12, Y+37	; 0x25
    1a16:	de a0       	ldd	r13, Y+38	; 0x26
    1a18:	ef a0       	ldd	r14, Y+39	; 0x27
    1a1a:	f8 a4       	ldd	r15, Y+40	; 0x28
    1a1c:	09 a5       	ldd	r16, Y+41	; 0x29
    1a1e:	1a a5       	ldd	r17, Y+42	; 0x2a
    1a20:	0e 94 c3 11 	call	0x2386	; 0x2386 <__subdi3>
    1a24:	22 2e       	mov	r2, r18
    1a26:	33 2e       	mov	r3, r19
    1a28:	44 2e       	mov	r4, r20
    1a2a:	55 2e       	mov	r5, r21
    1a2c:	66 2e       	mov	r6, r22
    1a2e:	77 2e       	mov	r7, r23
    1a30:	88 2e       	mov	r8, r24
    1a32:	99 2e       	mov	r9, r25
    1a34:	ab 84       	ldd	r10, Y+11	; 0x0b
    1a36:	bc 84       	ldd	r11, Y+12	; 0x0c
    1a38:	cd 84       	ldd	r12, Y+13	; 0x0d
    1a3a:	de 84       	ldd	r13, Y+14	; 0x0e
    1a3c:	ef 84       	ldd	r14, Y+15	; 0x0f
    1a3e:	f8 88       	ldd	r15, Y+16	; 0x10
    1a40:	09 89       	ldd	r16, Y+17	; 0x11
    1a42:	1a 89       	ldd	r17, Y+18	; 0x12
    1a44:	22 2d       	mov	r18, r2
    1a46:	33 2d       	mov	r19, r3
    1a48:	44 2d       	mov	r20, r4
    1a4a:	55 2d       	mov	r21, r5
    1a4c:	66 2d       	mov	r22, r6
    1a4e:	77 2d       	mov	r23, r7
    1a50:	88 2d       	mov	r24, r8
    1a52:	99 2d       	mov	r25, r9
    1a54:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivdi3>
    1a58:	a2 2e       	mov	r10, r18
    1a5a:	b3 2e       	mov	r11, r19
    1a5c:	c4 2e       	mov	r12, r20
    1a5e:	d5 2e       	mov	r13, r21
    1a60:	e6 2e       	mov	r14, r22
    1a62:	f7 2e       	mov	r15, r23
    1a64:	08 2f       	mov	r16, r24
    1a66:	19 2f       	mov	r17, r25
    1a68:	2a 2d       	mov	r18, r10
    1a6a:	3b 2d       	mov	r19, r11
    1a6c:	4c 2d       	mov	r20, r12
    1a6e:	5d 2d       	mov	r21, r13
    1a70:	6e 2d       	mov	r22, r14
    1a72:	7f 2d       	mov	r23, r15
    1a74:	80 2f       	mov	r24, r16
    1a76:	91 2f       	mov	r25, r17
    1a78:	82 2f       	mov	r24, r18
    1a7a:	eb a5       	ldd	r30, Y+43	; 0x2b
    1a7c:	fc a5       	ldd	r31, Y+44	; 0x2c
    1a7e:	80 83       	st	Z, r24
		
		while(!READ_BIT(TIFR,1));//Checking overflow flag
    1a80:	00 00       	nop
    1a82:	88 e5       	ldi	r24, 0x58	; 88
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	fc 01       	movw	r30, r24
    1a88:	80 81       	ld	r24, Z
    1a8a:	86 95       	lsr	r24
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	81 70       	andi	r24, 0x01	; 1
    1a92:	99 27       	eor	r25, r25
    1a94:	89 2b       	or	r24, r25
    1a96:	a9 f3       	breq	.-22     	; 0x1a82 <MCAL_timer_delay_ms+0x2c2>
    1a98:	12 c1       	rjmp	.+548    	; 0x1cbe <MCAL_timer_delay_ms+0x4fe>
	}else if (delay > Tmax) {
    1a9a:	ab a0       	ldd	r10, Y+35	; 0x23
    1a9c:	bc a0       	ldd	r11, Y+36	; 0x24
    1a9e:	cd a0       	ldd	r12, Y+37	; 0x25
    1aa0:	de a0       	ldd	r13, Y+38	; 0x26
    1aa2:	ef a0       	ldd	r14, Y+39	; 0x27
    1aa4:	f8 a4       	ldd	r15, Y+40	; 0x28
    1aa6:	09 a5       	ldd	r16, Y+41	; 0x29
    1aa8:	1a a5       	ldd	r17, Y+42	; 0x2a
    1aaa:	2b 88       	ldd	r2, Y+19	; 0x13
    1aac:	3c 88       	ldd	r3, Y+20	; 0x14
    1aae:	4d 88       	ldd	r4, Y+21	; 0x15
    1ab0:	5e 88       	ldd	r5, Y+22	; 0x16
    1ab2:	6f 88       	ldd	r6, Y+23	; 0x17
    1ab4:	78 8c       	ldd	r7, Y+24	; 0x18
    1ab6:	89 8c       	ldd	r8, Y+25	; 0x19
    1ab8:	9a 8c       	ldd	r9, Y+26	; 0x1a
    1aba:	2a 2d       	mov	r18, r10
    1abc:	3b 2d       	mov	r19, r11
    1abe:	4c 2d       	mov	r20, r12
    1ac0:	5d 2d       	mov	r21, r13
    1ac2:	6e 2d       	mov	r22, r14
    1ac4:	7f 2d       	mov	r23, r15
    1ac6:	80 2f       	mov	r24, r16
    1ac8:	91 2f       	mov	r25, r17
    1aca:	a2 2c       	mov	r10, r2
    1acc:	b3 2c       	mov	r11, r3
    1ace:	c4 2c       	mov	r12, r4
    1ad0:	d5 2c       	mov	r13, r5
    1ad2:	e6 2c       	mov	r14, r6
    1ad4:	f7 2c       	mov	r15, r7
    1ad6:	08 2d       	mov	r16, r8
    1ad8:	19 2d       	mov	r17, r9
    1ada:	0e 94 cc 11 	call	0x2398	; 0x2398 <__cmpdi2>
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <MCAL_timer_delay_ms+0x322>
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <MCAL_timer_delay_ms+0x324>
    1ae2:	dd c0       	rjmp	.+442    	; 0x1c9e <MCAL_timer_delay_ms+0x4de>
		Noverflows = (uint64_t)ceil((double)delay/Tmax);
    1ae4:	2b a1       	ldd	r18, Y+35	; 0x23
    1ae6:	3c a1       	ldd	r19, Y+36	; 0x24
    1ae8:	4d a1       	ldd	r20, Y+37	; 0x25
    1aea:	5e a1       	ldd	r21, Y+38	; 0x26
    1aec:	6f a1       	ldd	r22, Y+39	; 0x27
    1aee:	78 a5       	ldd	r23, Y+40	; 0x28
    1af0:	89 a5       	ldd	r24, Y+41	; 0x29
    1af2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1af4:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__floatundisf>
    1af8:	6b 01       	movw	r12, r22
    1afa:	7c 01       	movw	r14, r24
    1afc:	2b 89       	ldd	r18, Y+19	; 0x13
    1afe:	3c 89       	ldd	r19, Y+20	; 0x14
    1b00:	4d 89       	ldd	r20, Y+21	; 0x15
    1b02:	5e 89       	ldd	r21, Y+22	; 0x16
    1b04:	6f 89       	ldd	r22, Y+23	; 0x17
    1b06:	78 8d       	ldd	r23, Y+24	; 0x18
    1b08:	89 8d       	ldd	r24, Y+25	; 0x19
    1b0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b0c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__floatundisf>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 01       	movw	r18, r24
    1b16:	ad 01       	movw	r20, r26
    1b18:	c7 01       	movw	r24, r14
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <ceil>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <__fixunssfdi>
    1b38:	a2 2e       	mov	r10, r18
    1b3a:	b3 2e       	mov	r11, r19
    1b3c:	c4 2e       	mov	r12, r20
    1b3e:	d5 2e       	mov	r13, r21
    1b40:	e6 2e       	mov	r14, r22
    1b42:	f7 2e       	mov	r15, r23
    1b44:	08 2f       	mov	r16, r24
    1b46:	19 2f       	mov	r17, r25
    1b48:	ab 8e       	std	Y+27, r10	; 0x1b
    1b4a:	bc 8e       	std	Y+28, r11	; 0x1c
    1b4c:	cd 8e       	std	Y+29, r12	; 0x1d
    1b4e:	de 8e       	std	Y+30, r13	; 0x1e
    1b50:	ef 8e       	std	Y+31, r14	; 0x1f
    1b52:	f8 a2       	std	Y+32, r15	; 0x20
    1b54:	09 a3       	std	Y+33, r16	; 0x21
    1b56:	1a a3       	std	Y+34, r17	; 0x22
		TCNT0 = REGISTER_SIZE - ((delay/Tticks)/Noverflows);
    1b58:	82 e5       	ldi	r24, 0x52	; 82
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9e a7       	std	Y+46, r25	; 0x2e
    1b5e:	8d a7       	std	Y+45, r24	; 0x2d
    1b60:	ab 84       	ldd	r10, Y+11	; 0x0b
    1b62:	bc 84       	ldd	r11, Y+12	; 0x0c
    1b64:	cd 84       	ldd	r12, Y+13	; 0x0d
    1b66:	de 84       	ldd	r13, Y+14	; 0x0e
    1b68:	ef 84       	ldd	r14, Y+15	; 0x0f
    1b6a:	f8 88       	ldd	r15, Y+16	; 0x10
    1b6c:	09 89       	ldd	r16, Y+17	; 0x11
    1b6e:	1a 89       	ldd	r17, Y+18	; 0x12
    1b70:	2b a1       	ldd	r18, Y+35	; 0x23
    1b72:	3c a1       	ldd	r19, Y+36	; 0x24
    1b74:	4d a1       	ldd	r20, Y+37	; 0x25
    1b76:	5e a1       	ldd	r21, Y+38	; 0x26
    1b78:	6f a1       	ldd	r22, Y+39	; 0x27
    1b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b80:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivdi3>
    1b84:	a2 2e       	mov	r10, r18
    1b86:	b3 2e       	mov	r11, r19
    1b88:	c4 2e       	mov	r12, r20
    1b8a:	d5 2e       	mov	r13, r21
    1b8c:	e6 2e       	mov	r14, r22
    1b8e:	f7 2e       	mov	r15, r23
    1b90:	08 2f       	mov	r16, r24
    1b92:	19 2f       	mov	r17, r25
    1b94:	2a 2c       	mov	r2, r10
    1b96:	3b 2c       	mov	r3, r11
    1b98:	4c 2c       	mov	r4, r12
    1b9a:	5d 2c       	mov	r5, r13
    1b9c:	6e 2c       	mov	r6, r14
    1b9e:	7f 2c       	mov	r7, r15
    1ba0:	80 2e       	mov	r8, r16
    1ba2:	91 2e       	mov	r9, r17
    1ba4:	ab 8c       	ldd	r10, Y+27	; 0x1b
    1ba6:	bc 8c       	ldd	r11, Y+28	; 0x1c
    1ba8:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1baa:	de 8c       	ldd	r13, Y+30	; 0x1e
    1bac:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1bae:	f8 a0       	ldd	r15, Y+32	; 0x20
    1bb0:	09 a1       	ldd	r16, Y+33	; 0x21
    1bb2:	1a a1       	ldd	r17, Y+34	; 0x22
    1bb4:	22 2d       	mov	r18, r2
    1bb6:	33 2d       	mov	r19, r3
    1bb8:	44 2d       	mov	r20, r4
    1bba:	55 2d       	mov	r21, r5
    1bbc:	66 2d       	mov	r22, r6
    1bbe:	77 2d       	mov	r23, r7
    1bc0:	88 2d       	mov	r24, r8
    1bc2:	99 2d       	mov	r25, r9
    1bc4:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivdi3>
    1bc8:	a2 2e       	mov	r10, r18
    1bca:	b3 2e       	mov	r11, r19
    1bcc:	c4 2e       	mov	r12, r20
    1bce:	d5 2e       	mov	r13, r21
    1bd0:	e6 2e       	mov	r14, r22
    1bd2:	f7 2e       	mov	r15, r23
    1bd4:	08 2f       	mov	r16, r24
    1bd6:	19 2f       	mov	r17, r25
    1bd8:	2a 2d       	mov	r18, r10
    1bda:	3b 2d       	mov	r19, r11
    1bdc:	4c 2d       	mov	r20, r12
    1bde:	5d 2d       	mov	r21, r13
    1be0:	6e 2d       	mov	r22, r14
    1be2:	7f 2d       	mov	r23, r15
    1be4:	80 2f       	mov	r24, r16
    1be6:	91 2f       	mov	r25, r17
    1be8:	82 2f       	mov	r24, r18
    1bea:	81 95       	neg	r24
    1bec:	ed a5       	ldd	r30, Y+45	; 0x2d
    1bee:	fe a5       	ldd	r31, Y+46	; 0x2e
    1bf0:	80 83       	st	Z, r24
		
		while(overflowCount < Noverflows){
    1bf2:	30 c0       	rjmp	.+96     	; 0x1c54 <MCAL_timer_delay_ms+0x494>
			
			while(!READ_BIT(TIFR,1));//Checking overflow flag
    1bf4:	00 00       	nop
    1bf6:	88 e5       	ldi	r24, 0x58	; 88
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	80 81       	ld	r24, Z
    1bfe:	86 95       	lsr	r24
    1c00:	88 2f       	mov	r24, r24
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	81 70       	andi	r24, 0x01	; 1
    1c06:	99 27       	eor	r25, r25
    1c08:	89 2b       	or	r24, r25
    1c0a:	a9 f3       	breq	.-22     	; 0x1bf6 <MCAL_timer_delay_ms+0x436>
			
			CLEAR_BIT(TIFR,0);//Clear overflow flag
    1c0c:	88 e5       	ldi	r24, 0x58	; 88
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	28 e5       	ldi	r18, 0x58	; 88
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	f9 01       	movw	r30, r18
    1c16:	20 81       	ld	r18, Z
    1c18:	2e 7f       	andi	r18, 0xFE	; 254
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	20 83       	st	Z, r18

			overflowCount++;
    1c1e:	29 81       	ldd	r18, Y+1	; 0x01
    1c20:	3a 81       	ldd	r19, Y+2	; 0x02
    1c22:	4b 81       	ldd	r20, Y+3	; 0x03
    1c24:	5c 81       	ldd	r21, Y+4	; 0x04
    1c26:	6d 81       	ldd	r22, Y+5	; 0x05
    1c28:	7e 81       	ldd	r23, Y+6	; 0x06
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	a1 e0       	ldi	r26, 0x01	; 1
    1c30:	0e 94 b7 11 	call	0x236e	; 0x236e <__adddi3_s8>
    1c34:	a2 2e       	mov	r10, r18
    1c36:	b3 2e       	mov	r11, r19
    1c38:	c4 2e       	mov	r12, r20
    1c3a:	d5 2e       	mov	r13, r21
    1c3c:	e6 2e       	mov	r14, r22
    1c3e:	f7 2e       	mov	r15, r23
    1c40:	08 2f       	mov	r16, r24
    1c42:	19 2f       	mov	r17, r25
    1c44:	a9 82       	std	Y+1, r10	; 0x01
    1c46:	ba 82       	std	Y+2, r11	; 0x02
    1c48:	cb 82       	std	Y+3, r12	; 0x03
    1c4a:	dc 82       	std	Y+4, r13	; 0x04
    1c4c:	ed 82       	std	Y+5, r14	; 0x05
    1c4e:	fe 82       	std	Y+6, r15	; 0x06
    1c50:	0f 83       	std	Y+7, r16	; 0x07
    1c52:	18 87       	std	Y+8, r17	; 0x08
		while(!READ_BIT(TIFR,1));//Checking overflow flag
	}else if (delay > Tmax) {
		Noverflows = (uint64_t)ceil((double)delay/Tmax);
		TCNT0 = REGISTER_SIZE - ((delay/Tticks)/Noverflows);
		
		while(overflowCount < Noverflows){
    1c54:	a9 80       	ldd	r10, Y+1	; 0x01
    1c56:	ba 80       	ldd	r11, Y+2	; 0x02
    1c58:	cb 80       	ldd	r12, Y+3	; 0x03
    1c5a:	dc 80       	ldd	r13, Y+4	; 0x04
    1c5c:	ed 80       	ldd	r14, Y+5	; 0x05
    1c5e:	fe 80       	ldd	r15, Y+6	; 0x06
    1c60:	0f 81       	ldd	r16, Y+7	; 0x07
    1c62:	18 85       	ldd	r17, Y+8	; 0x08
    1c64:	2b 8c       	ldd	r2, Y+27	; 0x1b
    1c66:	3c 8c       	ldd	r3, Y+28	; 0x1c
    1c68:	4d 8c       	ldd	r4, Y+29	; 0x1d
    1c6a:	5e 8c       	ldd	r5, Y+30	; 0x1e
    1c6c:	6f 8c       	ldd	r6, Y+31	; 0x1f
    1c6e:	78 a0       	ldd	r7, Y+32	; 0x20
    1c70:	89 a0       	ldd	r8, Y+33	; 0x21
    1c72:	9a a0       	ldd	r9, Y+34	; 0x22
    1c74:	2a 2d       	mov	r18, r10
    1c76:	3b 2d       	mov	r19, r11
    1c78:	4c 2d       	mov	r20, r12
    1c7a:	5d 2d       	mov	r21, r13
    1c7c:	6e 2d       	mov	r22, r14
    1c7e:	7f 2d       	mov	r23, r15
    1c80:	80 2f       	mov	r24, r16
    1c82:	91 2f       	mov	r25, r17
    1c84:	a2 2c       	mov	r10, r2
    1c86:	b3 2c       	mov	r11, r3
    1c88:	c4 2c       	mov	r12, r4
    1c8a:	d5 2c       	mov	r13, r5
    1c8c:	e6 2c       	mov	r14, r6
    1c8e:	f7 2c       	mov	r15, r7
    1c90:	08 2d       	mov	r16, r8
    1c92:	19 2d       	mov	r17, r9
    1c94:	0e 94 cc 11 	call	0x2398	; 0x2398 <__cmpdi2>
    1c98:	08 f4       	brcc	.+2      	; 0x1c9c <MCAL_timer_delay_ms+0x4dc>
    1c9a:	ac cf       	rjmp	.-168    	; 0x1bf4 <MCAL_timer_delay_ms+0x434>
    1c9c:	10 c0       	rjmp	.+32     	; 0x1cbe <MCAL_timer_delay_ms+0x4fe>

			overflowCount++;
		}
		
	}else{
		TCNT0 = 0x00;
    1c9e:	82 e5       	ldi	r24, 0x52	; 82
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	10 82       	st	Z, r1
		
		while(!READ_BIT(TIFR,1));//Checking overflow flag
    1ca6:	00 00       	nop
    1ca8:	88 e5       	ldi	r24, 0x58	; 88
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	fc 01       	movw	r30, r24
    1cae:	80 81       	ld	r24, Z
    1cb0:	86 95       	lsr	r24
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	81 70       	andi	r24, 0x01	; 1
    1cb8:	99 27       	eor	r25, r25
    1cba:	89 2b       	or	r24, r25
    1cbc:	a9 f3       	breq	.-22     	; 0x1ca8 <MCAL_timer_delay_ms+0x4e8>
	}
	
	CLEAR_BIT(TIFR,0);//Clear overflow flag
    1cbe:	88 e5       	ldi	r24, 0x58	; 88
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	28 e5       	ldi	r18, 0x58	; 88
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	20 81       	ld	r18, Z
    1cca:	2e 7f       	andi	r18, 0xFE	; 254
    1ccc:	fc 01       	movw	r30, r24
    1cce:	20 83       	st	Z, r18
}
    1cd0:	00 00       	nop
    1cd2:	e6 96       	adiw	r28, 0x36	; 54
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	bf 90       	pop	r11
    1cf0:	af 90       	pop	r10
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	5f 90       	pop	r5
    1cfc:	4f 90       	pop	r4
    1cfe:	3f 90       	pop	r3
    1d00:	2f 90       	pop	r2
    1d02:	08 95       	ret

00001d04 <get_prescaler>:


uint16 get_prescaler(uint8_t index){
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	1f 92       	push	r1
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	89 83       	std	Y+1, r24	; 0x01
	switch(index){
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	a9 f0       	breq	.+42     	; 0x1d46 <get_prescaler+0x42>
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	91 05       	cpc	r25, r1
    1d20:	34 f4       	brge	.+12     	; 0x1d2e <get_prescaler+0x2a>
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	49 f0       	breq	.+18     	; 0x1d3a <get_prescaler+0x36>
    1d28:	02 97       	sbiw	r24, 0x02	; 2
    1d2a:	51 f0       	breq	.+20     	; 0x1d40 <get_prescaler+0x3c>
    1d2c:	15 c0       	rjmp	.+42     	; 0x1d58 <get_prescaler+0x54>
    1d2e:	84 30       	cpi	r24, 0x04	; 4
    1d30:	91 05       	cpc	r25, r1
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <get_prescaler+0x48>
    1d34:	05 97       	sbiw	r24, 0x05	; 5
    1d36:	69 f0       	breq	.+26     	; 0x1d52 <get_prescaler+0x4e>
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <get_prescaler+0x54>
		case  TIMER_PRESCALER_NONE:
		return 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <get_prescaler+0x58>
		
		case  TIMER_PRESCALER_8:
		return 8;
    1d40:	88 e0       	ldi	r24, 0x08	; 8
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0b c0       	rjmp	.+22     	; 0x1d5c <get_prescaler+0x58>
		
		case  TIMER_PRESCALER_64:
		return 64;
    1d46:	80 e4       	ldi	r24, 0x40	; 64
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	08 c0       	rjmp	.+16     	; 0x1d5c <get_prescaler+0x58>
		
		case  TIMER_PRESCALER_256:
		return 256;
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	05 c0       	rjmp	.+10     	; 0x1d5c <get_prescaler+0x58>
		
		case  TIMER_PRESCALER_1024:
		return 1024;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	94 e0       	ldi	r25, 0x04	; 4
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <get_prescaler+0x58>
	}
	
	return 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
}
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <ceil>:
    1d64:	0e 94 a4 10 	call	0x2148	; 0x2148 <__fp_trunc>
    1d68:	90 f0       	brcs	.+36     	; 0x1d8e <ceil+0x2a>
    1d6a:	9f 37       	cpi	r25, 0x7F	; 127
    1d6c:	48 f4       	brcc	.+18     	; 0x1d80 <ceil+0x1c>
    1d6e:	91 11       	cpse	r25, r1
    1d70:	16 f4       	brtc	.+4      	; 0x1d76 <ceil+0x12>
    1d72:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	80 e8       	ldi	r24, 0x80	; 128
    1d7c:	9f e3       	ldi	r25, 0x3F	; 63
    1d7e:	08 95       	ret
    1d80:	26 f0       	brts	.+8      	; 0x1d8a <ceil+0x26>
    1d82:	1b 16       	cp	r1, r27
    1d84:	61 1d       	adc	r22, r1
    1d86:	71 1d       	adc	r23, r1
    1d88:	81 1d       	adc	r24, r1
    1d8a:	0c 94 27 10 	jmp	0x204e	; 0x204e <__fp_mintl>
    1d8e:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__fp_mpack>

00001d92 <__divsf3>:
    1d92:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divsf3x>
    1d96:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_round>
    1d9a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_pscB>
    1d9e:	58 f0       	brcs	.+22     	; 0x1db6 <__divsf3+0x24>
    1da0:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fp_pscA>
    1da4:	40 f0       	brcs	.+16     	; 0x1db6 <__divsf3+0x24>
    1da6:	29 f4       	brne	.+10     	; 0x1db2 <__divsf3+0x20>
    1da8:	5f 3f       	cpi	r21, 0xFF	; 255
    1daa:	29 f0       	breq	.+10     	; 0x1db6 <__divsf3+0x24>
    1dac:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__fp_inf>
    1db0:	51 11       	cpse	r21, r1
    1db2:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>
    1db6:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <__fp_nan>

00001dba <__divsf3x>:
    1dba:	0e 94 82 10 	call	0x2104	; 0x2104 <__fp_split3>
    1dbe:	68 f3       	brcs	.-38     	; 0x1d9a <__divsf3+0x8>

00001dc0 <__divsf3_pse>:
    1dc0:	99 23       	and	r25, r25
    1dc2:	b1 f3       	breq	.-20     	; 0x1db0 <__divsf3+0x1e>
    1dc4:	55 23       	and	r21, r21
    1dc6:	91 f3       	breq	.-28     	; 0x1dac <__divsf3+0x1a>
    1dc8:	95 1b       	sub	r25, r21
    1dca:	55 0b       	sbc	r21, r21
    1dcc:	bb 27       	eor	r27, r27
    1dce:	aa 27       	eor	r26, r26
    1dd0:	62 17       	cp	r22, r18
    1dd2:	73 07       	cpc	r23, r19
    1dd4:	84 07       	cpc	r24, r20
    1dd6:	38 f0       	brcs	.+14     	; 0x1de6 <__divsf3_pse+0x26>
    1dd8:	9f 5f       	subi	r25, 0xFF	; 255
    1dda:	5f 4f       	sbci	r21, 0xFF	; 255
    1ddc:	22 0f       	add	r18, r18
    1dde:	33 1f       	adc	r19, r19
    1de0:	44 1f       	adc	r20, r20
    1de2:	aa 1f       	adc	r26, r26
    1de4:	a9 f3       	breq	.-22     	; 0x1dd0 <__divsf3_pse+0x10>
    1de6:	35 d0       	rcall	.+106    	; 0x1e52 <__divsf3_pse+0x92>
    1de8:	0e 2e       	mov	r0, r30
    1dea:	3a f0       	brmi	.+14     	; 0x1dfa <__divsf3_pse+0x3a>
    1dec:	e0 e8       	ldi	r30, 0x80	; 128
    1dee:	32 d0       	rcall	.+100    	; 0x1e54 <__divsf3_pse+0x94>
    1df0:	91 50       	subi	r25, 0x01	; 1
    1df2:	50 40       	sbci	r21, 0x00	; 0
    1df4:	e6 95       	lsr	r30
    1df6:	00 1c       	adc	r0, r0
    1df8:	ca f7       	brpl	.-14     	; 0x1dec <__divsf3_pse+0x2c>
    1dfa:	2b d0       	rcall	.+86     	; 0x1e52 <__divsf3_pse+0x92>
    1dfc:	fe 2f       	mov	r31, r30
    1dfe:	29 d0       	rcall	.+82     	; 0x1e52 <__divsf3_pse+0x92>
    1e00:	66 0f       	add	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	bb 1f       	adc	r27, r27
    1e08:	26 17       	cp	r18, r22
    1e0a:	37 07       	cpc	r19, r23
    1e0c:	48 07       	cpc	r20, r24
    1e0e:	ab 07       	cpc	r26, r27
    1e10:	b0 e8       	ldi	r27, 0x80	; 128
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <__divsf3_pse+0x56>
    1e14:	bb 0b       	sbc	r27, r27
    1e16:	80 2d       	mov	r24, r0
    1e18:	bf 01       	movw	r22, r30
    1e1a:	ff 27       	eor	r31, r31
    1e1c:	93 58       	subi	r25, 0x83	; 131
    1e1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e20:	3a f0       	brmi	.+14     	; 0x1e30 <__divsf3_pse+0x70>
    1e22:	9e 3f       	cpi	r25, 0xFE	; 254
    1e24:	51 05       	cpc	r21, r1
    1e26:	78 f0       	brcs	.+30     	; 0x1e46 <__divsf3_pse+0x86>
    1e28:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__fp_inf>
    1e2c:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>
    1e30:	5f 3f       	cpi	r21, 0xFF	; 255
    1e32:	e4 f3       	brlt	.-8      	; 0x1e2c <__divsf3_pse+0x6c>
    1e34:	98 3e       	cpi	r25, 0xE8	; 232
    1e36:	d4 f3       	brlt	.-12     	; 0x1e2c <__divsf3_pse+0x6c>
    1e38:	86 95       	lsr	r24
    1e3a:	77 95       	ror	r23
    1e3c:	67 95       	ror	r22
    1e3e:	b7 95       	ror	r27
    1e40:	f7 95       	ror	r31
    1e42:	9f 5f       	subi	r25, 0xFF	; 255
    1e44:	c9 f7       	brne	.-14     	; 0x1e38 <__divsf3_pse+0x78>
    1e46:	88 0f       	add	r24, r24
    1e48:	91 1d       	adc	r25, r1
    1e4a:	96 95       	lsr	r25
    1e4c:	87 95       	ror	r24
    1e4e:	97 f9       	bld	r25, 7
    1e50:	08 95       	ret
    1e52:	e1 e0       	ldi	r30, 0x01	; 1
    1e54:	66 0f       	add	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	bb 1f       	adc	r27, r27
    1e5c:	62 17       	cp	r22, r18
    1e5e:	73 07       	cpc	r23, r19
    1e60:	84 07       	cpc	r24, r20
    1e62:	ba 07       	cpc	r27, r26
    1e64:	20 f0       	brcs	.+8      	; 0x1e6e <__divsf3_pse+0xae>
    1e66:	62 1b       	sub	r22, r18
    1e68:	73 0b       	sbc	r23, r19
    1e6a:	84 0b       	sbc	r24, r20
    1e6c:	ba 0b       	sbc	r27, r26
    1e6e:	ee 1f       	adc	r30, r30
    1e70:	88 f7       	brcc	.-30     	; 0x1e54 <__divsf3_pse+0x94>
    1e72:	e0 95       	com	r30
    1e74:	08 95       	ret

00001e76 <__fixsfdi>:
    1e76:	be e3       	ldi	r27, 0x3E	; 62
    1e78:	04 d0       	rcall	.+8      	; 0x1e82 <__fixunssfdi+0x2>
    1e7a:	08 f4       	brcc	.+2      	; 0x1e7e <__fixsfdi+0x8>
    1e7c:	90 e8       	ldi	r25, 0x80	; 128
    1e7e:	08 95       	ret

00001e80 <__fixunssfdi>:
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	22 27       	eor	r18, r18
    1e84:	33 27       	eor	r19, r19
    1e86:	a9 01       	movw	r20, r18
    1e88:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_splitA>
    1e8c:	60 f1       	brcs	.+88     	; 0x1ee6 <__fixunssfdi+0x66>
    1e8e:	9f 57       	subi	r25, 0x7F	; 127
    1e90:	48 f1       	brcs	.+82     	; 0x1ee4 <__fixunssfdi+0x64>
    1e92:	b9 17       	cp	r27, r25
    1e94:	40 f1       	brcs	.+80     	; 0x1ee6 <__fixunssfdi+0x66>
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	b9 1b       	sub	r27, r25
    1e9a:	99 27       	eor	r25, r25
    1e9c:	b8 50       	subi	r27, 0x08	; 8
    1e9e:	3a f4       	brpl	.+14     	; 0x1eae <__fixunssfdi+0x2e>
    1ea0:	66 0f       	add	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	b3 95       	inc	r27
    1eaa:	d2 f3       	brmi	.-12     	; 0x1ea0 <__fixunssfdi+0x20>
    1eac:	16 c0       	rjmp	.+44     	; 0x1eda <__fixunssfdi+0x5a>
    1eae:	b8 50       	subi	r27, 0x08	; 8
    1eb0:	4a f0       	brmi	.+18     	; 0x1ec4 <__fixunssfdi+0x44>
    1eb2:	23 2f       	mov	r18, r19
    1eb4:	34 2f       	mov	r19, r20
    1eb6:	45 2f       	mov	r20, r21
    1eb8:	56 2f       	mov	r21, r22
    1eba:	67 2f       	mov	r22, r23
    1ebc:	78 2f       	mov	r23, r24
    1ebe:	88 27       	eor	r24, r24
    1ec0:	b8 50       	subi	r27, 0x08	; 8
    1ec2:	ba f7       	brpl	.-18     	; 0x1eb2 <__fixunssfdi+0x32>
    1ec4:	b8 5f       	subi	r27, 0xF8	; 248
    1ec6:	49 f0       	breq	.+18     	; 0x1eda <__fixunssfdi+0x5a>
    1ec8:	86 95       	lsr	r24
    1eca:	77 95       	ror	r23
    1ecc:	67 95       	ror	r22
    1ece:	57 95       	ror	r21
    1ed0:	47 95       	ror	r20
    1ed2:	37 95       	ror	r19
    1ed4:	27 95       	ror	r18
    1ed6:	ba 95       	dec	r27
    1ed8:	b9 f7       	brne	.-18     	; 0x1ec8 <__fixunssfdi+0x48>
    1eda:	16 f4       	brtc	.+4      	; 0x1ee0 <__fixunssfdi+0x60>
    1edc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_negdi>
    1ee0:	88 94       	clc
    1ee2:	08 95       	ret
    1ee4:	88 94       	clc
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	cb 01       	movw	r24, r22
    1eec:	08 95       	ret

00001eee <__fixunssfsi>:
    1eee:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_splitA>
    1ef2:	88 f0       	brcs	.+34     	; 0x1f16 <__fixunssfsi+0x28>
    1ef4:	9f 57       	subi	r25, 0x7F	; 127
    1ef6:	98 f0       	brcs	.+38     	; 0x1f1e <__fixunssfsi+0x30>
    1ef8:	b9 2f       	mov	r27, r25
    1efa:	99 27       	eor	r25, r25
    1efc:	b7 51       	subi	r27, 0x17	; 23
    1efe:	b0 f0       	brcs	.+44     	; 0x1f2c <__fixunssfsi+0x3e>
    1f00:	e1 f0       	breq	.+56     	; 0x1f3a <__fixunssfsi+0x4c>
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	1a f0       	brmi	.+6      	; 0x1f12 <__fixunssfsi+0x24>
    1f0c:	ba 95       	dec	r27
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__fixunssfsi+0x14>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <__fixunssfsi+0x4c>
    1f12:	b1 30       	cpi	r27, 0x01	; 1
    1f14:	91 f0       	breq	.+36     	; 0x1f3a <__fixunssfsi+0x4c>
    1f16:	0e 94 bc 10 	call	0x2178	; 0x2178 <__fp_zero>
    1f1a:	b1 e0       	ldi	r27, 0x01	; 1
    1f1c:	08 95       	ret
    1f1e:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__fp_zero>
    1f22:	67 2f       	mov	r22, r23
    1f24:	78 2f       	mov	r23, r24
    1f26:	88 27       	eor	r24, r24
    1f28:	b8 5f       	subi	r27, 0xF8	; 248
    1f2a:	39 f0       	breq	.+14     	; 0x1f3a <__fixunssfsi+0x4c>
    1f2c:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2e:	cc f3       	brlt	.-14     	; 0x1f22 <__fixunssfsi+0x34>
    1f30:	86 95       	lsr	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b3 95       	inc	r27
    1f38:	d9 f7       	brne	.-10     	; 0x1f30 <__fixunssfsi+0x42>
    1f3a:	3e f4       	brtc	.+14     	; 0x1f4a <__fixunssfsi+0x5c>
    1f3c:	90 95       	com	r25
    1f3e:	80 95       	com	r24
    1f40:	70 95       	com	r23
    1f42:	61 95       	neg	r22
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	8f 4f       	sbci	r24, 0xFF	; 255
    1f48:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4a:	08 95       	ret

00001f4c <__floatunsisf>:
    1f4c:	e8 94       	clt
    1f4e:	09 c0       	rjmp	.+18     	; 0x1f62 <__floatsisf+0x12>

00001f50 <__floatsisf>:
    1f50:	97 fb       	bst	r25, 7
    1f52:	3e f4       	brtc	.+14     	; 0x1f62 <__floatsisf+0x12>
    1f54:	90 95       	com	r25
    1f56:	80 95       	com	r24
    1f58:	70 95       	com	r23
    1f5a:	61 95       	neg	r22
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	99 23       	and	r25, r25
    1f64:	a9 f0       	breq	.+42     	; 0x1f90 <__floatsisf+0x40>
    1f66:	f9 2f       	mov	r31, r25
    1f68:	96 e9       	ldi	r25, 0x96	; 150
    1f6a:	bb 27       	eor	r27, r27
    1f6c:	93 95       	inc	r25
    1f6e:	f6 95       	lsr	r31
    1f70:	87 95       	ror	r24
    1f72:	77 95       	ror	r23
    1f74:	67 95       	ror	r22
    1f76:	b7 95       	ror	r27
    1f78:	f1 11       	cpse	r31, r1
    1f7a:	f8 cf       	rjmp	.-16     	; 0x1f6c <__floatsisf+0x1c>
    1f7c:	fa f4       	brpl	.+62     	; 0x1fbc <__floatsisf+0x6c>
    1f7e:	bb 0f       	add	r27, r27
    1f80:	11 f4       	brne	.+4      	; 0x1f86 <__floatsisf+0x36>
    1f82:	60 ff       	sbrs	r22, 0
    1f84:	1b c0       	rjmp	.+54     	; 0x1fbc <__floatsisf+0x6c>
    1f86:	6f 5f       	subi	r22, 0xFF	; 255
    1f88:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <__floatsisf+0x6c>
    1f90:	88 23       	and	r24, r24
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <__floatsisf+0x48>
    1f94:	96 e9       	ldi	r25, 0x96	; 150
    1f96:	11 c0       	rjmp	.+34     	; 0x1fba <__floatsisf+0x6a>
    1f98:	77 23       	and	r23, r23
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <__floatsisf+0x54>
    1f9c:	9e e8       	ldi	r25, 0x8E	; 142
    1f9e:	87 2f       	mov	r24, r23
    1fa0:	76 2f       	mov	r23, r22
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__floatsisf+0x5e>
    1fa4:	66 23       	and	r22, r22
    1fa6:	71 f0       	breq	.+28     	; 0x1fc4 <__floatsisf+0x74>
    1fa8:	96 e8       	ldi	r25, 0x86	; 134
    1faa:	86 2f       	mov	r24, r22
    1fac:	70 e0       	ldi	r23, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	2a f0       	brmi	.+10     	; 0x1fbc <__floatsisf+0x6c>
    1fb2:	9a 95       	dec	r25
    1fb4:	66 0f       	add	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	da f7       	brpl	.-10     	; 0x1fb2 <__floatsisf+0x62>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	96 95       	lsr	r25
    1fc0:	87 95       	ror	r24
    1fc2:	97 f9       	bld	r25, 7
    1fc4:	08 95       	ret

00001fc6 <__floatundisf>:
    1fc6:	e8 94       	clt

00001fc8 <__fp_di2sf>:
    1fc8:	f9 2f       	mov	r31, r25
    1fca:	96 eb       	ldi	r25, 0xB6	; 182
    1fcc:	ff 23       	and	r31, r31
    1fce:	81 f0       	breq	.+32     	; 0x1ff0 <__fp_di2sf+0x28>
    1fd0:	12 16       	cp	r1, r18
    1fd2:	13 06       	cpc	r1, r19
    1fd4:	14 06       	cpc	r1, r20
    1fd6:	44 0b       	sbc	r20, r20
    1fd8:	93 95       	inc	r25
    1fda:	f6 95       	lsr	r31
    1fdc:	87 95       	ror	r24
    1fde:	77 95       	ror	r23
    1fe0:	67 95       	ror	r22
    1fe2:	57 95       	ror	r21
    1fe4:	40 40       	sbci	r20, 0x00	; 0
    1fe6:	ff 23       	and	r31, r31
    1fe8:	b9 f7       	brne	.-18     	; 0x1fd8 <__fp_di2sf+0x10>
    1fea:	1b c0       	rjmp	.+54     	; 0x2022 <__fp_di2sf+0x5a>
    1fec:	99 27       	eor	r25, r25
    1fee:	08 95       	ret
    1ff0:	88 23       	and	r24, r24
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <__fp_di2sf+0x40>
    1ff4:	98 50       	subi	r25, 0x08	; 8
    1ff6:	d2 f7       	brpl	.-12     	; 0x1fec <__fp_di2sf+0x24>
    1ff8:	87 2b       	or	r24, r23
    1ffa:	76 2f       	mov	r23, r22
    1ffc:	65 2f       	mov	r22, r21
    1ffe:	54 2f       	mov	r21, r20
    2000:	43 2f       	mov	r20, r19
    2002:	32 2f       	mov	r19, r18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	b1 f3       	breq	.-20     	; 0x1ff4 <__fp_di2sf+0x2c>
    2008:	12 16       	cp	r1, r18
    200a:	13 06       	cpc	r1, r19
    200c:	14 06       	cpc	r1, r20
    200e:	44 0b       	sbc	r20, r20
    2010:	88 23       	and	r24, r24
    2012:	3a f0       	brmi	.+14     	; 0x2022 <__fp_di2sf+0x5a>
    2014:	9a 95       	dec	r25
    2016:	44 0f       	add	r20, r20
    2018:	55 1f       	adc	r21, r21
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	ca f7       	brpl	.-14     	; 0x2014 <__fp_di2sf+0x4c>
    2022:	55 23       	and	r21, r21
    2024:	4a f4       	brpl	.+18     	; 0x2038 <__fp_di2sf+0x70>
    2026:	44 0f       	add	r20, r20
    2028:	55 1f       	adc	r21, r21
    202a:	11 f4       	brne	.+4      	; 0x2030 <__fp_di2sf+0x68>
    202c:	60 ff       	sbrs	r22, 0
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <__fp_di2sf+0x70>
    2030:	6f 5f       	subi	r22, 0xFF	; 255
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	8f 4f       	sbci	r24, 0xFF	; 255
    2036:	9f 4f       	sbci	r25, 0xFF	; 255
    2038:	88 0f       	add	r24, r24
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret

00002042 <__fp_inf>:
    2042:	97 f9       	bld	r25, 7
    2044:	9f 67       	ori	r25, 0x7F	; 127
    2046:	80 e8       	ldi	r24, 0x80	; 128
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	08 95       	ret

0000204e <__fp_mintl>:
    204e:	88 23       	and	r24, r24
    2050:	71 f4       	brne	.+28     	; 0x206e <__fp_mintl+0x20>
    2052:	77 23       	and	r23, r23
    2054:	21 f0       	breq	.+8      	; 0x205e <__fp_mintl+0x10>
    2056:	98 50       	subi	r25, 0x08	; 8
    2058:	87 2b       	or	r24, r23
    205a:	76 2f       	mov	r23, r22
    205c:	07 c0       	rjmp	.+14     	; 0x206c <__fp_mintl+0x1e>
    205e:	66 23       	and	r22, r22
    2060:	11 f4       	brne	.+4      	; 0x2066 <__fp_mintl+0x18>
    2062:	99 27       	eor	r25, r25
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <__fp_mintl+0x32>
    2066:	90 51       	subi	r25, 0x10	; 16
    2068:	86 2b       	or	r24, r22
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	2a f0       	brmi	.+10     	; 0x207a <__fp_mintl+0x2c>
    2070:	9a 95       	dec	r25
    2072:	66 0f       	add	r22, r22
    2074:	77 1f       	adc	r23, r23
    2076:	88 1f       	adc	r24, r24
    2078:	da f7       	brpl	.-10     	; 0x2070 <__fp_mintl+0x22>
    207a:	88 0f       	add	r24, r24
    207c:	96 95       	lsr	r25
    207e:	87 95       	ror	r24
    2080:	97 f9       	bld	r25, 7
    2082:	08 95       	ret

00002084 <__fp_mpack>:
    2084:	9f 3f       	cpi	r25, 0xFF	; 255
    2086:	31 f0       	breq	.+12     	; 0x2094 <__fp_mpack_finite+0xc>

00002088 <__fp_mpack_finite>:
    2088:	91 50       	subi	r25, 0x01	; 1
    208a:	20 f4       	brcc	.+8      	; 0x2094 <__fp_mpack_finite+0xc>
    208c:	87 95       	ror	r24
    208e:	77 95       	ror	r23
    2090:	67 95       	ror	r22
    2092:	b7 95       	ror	r27
    2094:	88 0f       	add	r24, r24
    2096:	91 1d       	adc	r25, r1
    2098:	96 95       	lsr	r25
    209a:	87 95       	ror	r24
    209c:	97 f9       	bld	r25, 7
    209e:	08 95       	ret

000020a0 <__fp_nan>:
    20a0:	9f ef       	ldi	r25, 0xFF	; 255
    20a2:	80 ec       	ldi	r24, 0xC0	; 192
    20a4:	08 95       	ret

000020a6 <__fp_negdi>:
    20a6:	90 95       	com	r25
    20a8:	80 95       	com	r24
    20aa:	70 95       	com	r23
    20ac:	60 95       	com	r22
    20ae:	50 95       	com	r21
    20b0:	40 95       	com	r20
    20b2:	30 95       	com	r19
    20b4:	21 95       	neg	r18
    20b6:	3f 4f       	sbci	r19, 0xFF	; 255
    20b8:	4f 4f       	sbci	r20, 0xFF	; 255
    20ba:	5f 4f       	sbci	r21, 0xFF	; 255
    20bc:	6f 4f       	sbci	r22, 0xFF	; 255
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	8f 4f       	sbci	r24, 0xFF	; 255
    20c2:	9f 4f       	sbci	r25, 0xFF	; 255
    20c4:	08 95       	ret

000020c6 <__fp_pscA>:
    20c6:	00 24       	eor	r0, r0
    20c8:	0a 94       	dec	r0
    20ca:	16 16       	cp	r1, r22
    20cc:	17 06       	cpc	r1, r23
    20ce:	18 06       	cpc	r1, r24
    20d0:	09 06       	cpc	r0, r25
    20d2:	08 95       	ret

000020d4 <__fp_pscB>:
    20d4:	00 24       	eor	r0, r0
    20d6:	0a 94       	dec	r0
    20d8:	12 16       	cp	r1, r18
    20da:	13 06       	cpc	r1, r19
    20dc:	14 06       	cpc	r1, r20
    20de:	05 06       	cpc	r0, r21
    20e0:	08 95       	ret

000020e2 <__fp_round>:
    20e2:	09 2e       	mov	r0, r25
    20e4:	03 94       	inc	r0
    20e6:	00 0c       	add	r0, r0
    20e8:	11 f4       	brne	.+4      	; 0x20ee <__fp_round+0xc>
    20ea:	88 23       	and	r24, r24
    20ec:	52 f0       	brmi	.+20     	; 0x2102 <__fp_round+0x20>
    20ee:	bb 0f       	add	r27, r27
    20f0:	40 f4       	brcc	.+16     	; 0x2102 <__fp_round+0x20>
    20f2:	bf 2b       	or	r27, r31
    20f4:	11 f4       	brne	.+4      	; 0x20fa <__fp_round+0x18>
    20f6:	60 ff       	sbrs	r22, 0
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <__fp_round+0x20>
    20fa:	6f 5f       	subi	r22, 0xFF	; 255
    20fc:	7f 4f       	sbci	r23, 0xFF	; 255
    20fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	08 95       	ret

00002104 <__fp_split3>:
    2104:	57 fd       	sbrc	r21, 7
    2106:	90 58       	subi	r25, 0x80	; 128
    2108:	44 0f       	add	r20, r20
    210a:	55 1f       	adc	r21, r21
    210c:	59 f0       	breq	.+22     	; 0x2124 <__fp_splitA+0x10>
    210e:	5f 3f       	cpi	r21, 0xFF	; 255
    2110:	71 f0       	breq	.+28     	; 0x212e <__fp_splitA+0x1a>
    2112:	47 95       	ror	r20

00002114 <__fp_splitA>:
    2114:	88 0f       	add	r24, r24
    2116:	97 fb       	bst	r25, 7
    2118:	99 1f       	adc	r25, r25
    211a:	61 f0       	breq	.+24     	; 0x2134 <__fp_splitA+0x20>
    211c:	9f 3f       	cpi	r25, 0xFF	; 255
    211e:	79 f0       	breq	.+30     	; 0x213e <__fp_splitA+0x2a>
    2120:	87 95       	ror	r24
    2122:	08 95       	ret
    2124:	12 16       	cp	r1, r18
    2126:	13 06       	cpc	r1, r19
    2128:	14 06       	cpc	r1, r20
    212a:	55 1f       	adc	r21, r21
    212c:	f2 cf       	rjmp	.-28     	; 0x2112 <__fp_split3+0xe>
    212e:	46 95       	lsr	r20
    2130:	f1 df       	rcall	.-30     	; 0x2114 <__fp_splitA>
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <__fp_splitA+0x30>
    2134:	16 16       	cp	r1, r22
    2136:	17 06       	cpc	r1, r23
    2138:	18 06       	cpc	r1, r24
    213a:	99 1f       	adc	r25, r25
    213c:	f1 cf       	rjmp	.-30     	; 0x2120 <__fp_splitA+0xc>
    213e:	86 95       	lsr	r24
    2140:	71 05       	cpc	r23, r1
    2142:	61 05       	cpc	r22, r1
    2144:	08 94       	sec
    2146:	08 95       	ret

00002148 <__fp_trunc>:
    2148:	0e 94 8a 10 	call	0x2114	; 0x2114 <__fp_splitA>
    214c:	a0 f0       	brcs	.+40     	; 0x2176 <__fp_trunc+0x2e>
    214e:	be e7       	ldi	r27, 0x7E	; 126
    2150:	b9 17       	cp	r27, r25
    2152:	88 f4       	brcc	.+34     	; 0x2176 <__fp_trunc+0x2e>
    2154:	bb 27       	eor	r27, r27
    2156:	9f 38       	cpi	r25, 0x8F	; 143
    2158:	60 f4       	brcc	.+24     	; 0x2172 <__fp_trunc+0x2a>
    215a:	16 16       	cp	r1, r22
    215c:	b1 1d       	adc	r27, r1
    215e:	67 2f       	mov	r22, r23
    2160:	78 2f       	mov	r23, r24
    2162:	88 27       	eor	r24, r24
    2164:	98 5f       	subi	r25, 0xF8	; 248
    2166:	f7 cf       	rjmp	.-18     	; 0x2156 <__fp_trunc+0xe>
    2168:	86 95       	lsr	r24
    216a:	77 95       	ror	r23
    216c:	67 95       	ror	r22
    216e:	b1 1d       	adc	r27, r1
    2170:	93 95       	inc	r25
    2172:	96 39       	cpi	r25, 0x96	; 150
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <__fp_trunc+0x20>
    2176:	08 95       	ret

00002178 <__fp_zero>:
    2178:	e8 94       	clt

0000217a <__fp_szero>:
    217a:	bb 27       	eor	r27, r27
    217c:	66 27       	eor	r22, r22
    217e:	77 27       	eor	r23, r23
    2180:	cb 01       	movw	r24, r22
    2182:	97 f9       	bld	r25, 7
    2184:	08 95       	ret

00002186 <__mulsf3>:
    2186:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__mulsf3x>
    218a:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__fp_round>
    218e:	0e 94 63 10 	call	0x20c6	; 0x20c6 <__fp_pscA>
    2192:	38 f0       	brcs	.+14     	; 0x21a2 <__mulsf3+0x1c>
    2194:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__fp_pscB>
    2198:	20 f0       	brcs	.+8      	; 0x21a2 <__mulsf3+0x1c>
    219a:	95 23       	and	r25, r21
    219c:	11 f0       	breq	.+4      	; 0x21a2 <__mulsf3+0x1c>
    219e:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__fp_inf>
    21a2:	0c 94 50 10 	jmp	0x20a0	; 0x20a0 <__fp_nan>
    21a6:	11 24       	eor	r1, r1
    21a8:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>

000021ac <__mulsf3x>:
    21ac:	0e 94 82 10 	call	0x2104	; 0x2104 <__fp_split3>
    21b0:	70 f3       	brcs	.-36     	; 0x218e <__mulsf3+0x8>

000021b2 <__mulsf3_pse>:
    21b2:	95 9f       	mul	r25, r21
    21b4:	c1 f3       	breq	.-16     	; 0x21a6 <__mulsf3+0x20>
    21b6:	95 0f       	add	r25, r21
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	55 1f       	adc	r21, r21
    21bc:	62 9f       	mul	r22, r18
    21be:	f0 01       	movw	r30, r0
    21c0:	72 9f       	mul	r23, r18
    21c2:	bb 27       	eor	r27, r27
    21c4:	f0 0d       	add	r31, r0
    21c6:	b1 1d       	adc	r27, r1
    21c8:	63 9f       	mul	r22, r19
    21ca:	aa 27       	eor	r26, r26
    21cc:	f0 0d       	add	r31, r0
    21ce:	b1 1d       	adc	r27, r1
    21d0:	aa 1f       	adc	r26, r26
    21d2:	64 9f       	mul	r22, r20
    21d4:	66 27       	eor	r22, r22
    21d6:	b0 0d       	add	r27, r0
    21d8:	a1 1d       	adc	r26, r1
    21da:	66 1f       	adc	r22, r22
    21dc:	82 9f       	mul	r24, r18
    21de:	22 27       	eor	r18, r18
    21e0:	b0 0d       	add	r27, r0
    21e2:	a1 1d       	adc	r26, r1
    21e4:	62 1f       	adc	r22, r18
    21e6:	73 9f       	mul	r23, r19
    21e8:	b0 0d       	add	r27, r0
    21ea:	a1 1d       	adc	r26, r1
    21ec:	62 1f       	adc	r22, r18
    21ee:	83 9f       	mul	r24, r19
    21f0:	a0 0d       	add	r26, r0
    21f2:	61 1d       	adc	r22, r1
    21f4:	22 1f       	adc	r18, r18
    21f6:	74 9f       	mul	r23, r20
    21f8:	33 27       	eor	r19, r19
    21fa:	a0 0d       	add	r26, r0
    21fc:	61 1d       	adc	r22, r1
    21fe:	23 1f       	adc	r18, r19
    2200:	84 9f       	mul	r24, r20
    2202:	60 0d       	add	r22, r0
    2204:	21 1d       	adc	r18, r1
    2206:	82 2f       	mov	r24, r18
    2208:	76 2f       	mov	r23, r22
    220a:	6a 2f       	mov	r22, r26
    220c:	11 24       	eor	r1, r1
    220e:	9f 57       	subi	r25, 0x7F	; 127
    2210:	50 40       	sbci	r21, 0x00	; 0
    2212:	9a f0       	brmi	.+38     	; 0x223a <__mulsf3_pse+0x88>
    2214:	f1 f0       	breq	.+60     	; 0x2252 <__mulsf3_pse+0xa0>
    2216:	88 23       	and	r24, r24
    2218:	4a f0       	brmi	.+18     	; 0x222c <__mulsf3_pse+0x7a>
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	bb 1f       	adc	r27, r27
    2220:	66 1f       	adc	r22, r22
    2222:	77 1f       	adc	r23, r23
    2224:	88 1f       	adc	r24, r24
    2226:	91 50       	subi	r25, 0x01	; 1
    2228:	50 40       	sbci	r21, 0x00	; 0
    222a:	a9 f7       	brne	.-22     	; 0x2216 <__mulsf3_pse+0x64>
    222c:	9e 3f       	cpi	r25, 0xFE	; 254
    222e:	51 05       	cpc	r21, r1
    2230:	80 f0       	brcs	.+32     	; 0x2252 <__mulsf3_pse+0xa0>
    2232:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__fp_inf>
    2236:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__fp_szero>
    223a:	5f 3f       	cpi	r21, 0xFF	; 255
    223c:	e4 f3       	brlt	.-8      	; 0x2236 <__mulsf3_pse+0x84>
    223e:	98 3e       	cpi	r25, 0xE8	; 232
    2240:	d4 f3       	brlt	.-12     	; 0x2236 <__mulsf3_pse+0x84>
    2242:	86 95       	lsr	r24
    2244:	77 95       	ror	r23
    2246:	67 95       	ror	r22
    2248:	b7 95       	ror	r27
    224a:	f7 95       	ror	r31
    224c:	e7 95       	ror	r30
    224e:	9f 5f       	subi	r25, 0xFF	; 255
    2250:	c1 f7       	brne	.-16     	; 0x2242 <__mulsf3_pse+0x90>
    2252:	fe 2b       	or	r31, r30
    2254:	88 0f       	add	r24, r24
    2256:	91 1d       	adc	r25, r1
    2258:	96 95       	lsr	r25
    225a:	87 95       	ror	r24
    225c:	97 f9       	bld	r25, 7
    225e:	08 95       	ret

00002260 <__tablejump2__>:
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	05 90       	lpm	r0, Z+
    2266:	f4 91       	lpm	r31, Z
    2268:	e0 2d       	mov	r30, r0
    226a:	09 94       	ijmp

0000226c <__umoddi3>:
    226c:	68 94       	set
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <__udivdi3_umoddi3>

00002270 <__udivdi3>:
    2270:	e8 94       	clt

00002272 <__udivdi3_umoddi3>:
    2272:	8f 92       	push	r8
    2274:	9f 92       	push	r9
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	0e 94 44 11 	call	0x2288	; 0x2288 <__udivmod64>
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	9f 90       	pop	r9
    2284:	8f 90       	pop	r8
    2286:	08 95       	ret

00002288 <__udivmod64>:
    2288:	88 24       	eor	r8, r8
    228a:	99 24       	eor	r9, r9
    228c:	f4 01       	movw	r30, r8
    228e:	e4 01       	movw	r28, r8
    2290:	b0 e4       	ldi	r27, 0x40	; 64
    2292:	9f 93       	push	r25
    2294:	aa 27       	eor	r26, r26
    2296:	9a 15       	cp	r25, r10
    2298:	8b 04       	cpc	r8, r11
    229a:	9c 04       	cpc	r9, r12
    229c:	ed 05       	cpc	r30, r13
    229e:	fe 05       	cpc	r31, r14
    22a0:	cf 05       	cpc	r28, r15
    22a2:	d0 07       	cpc	r29, r16
    22a4:	a1 07       	cpc	r26, r17
    22a6:	98 f4       	brcc	.+38     	; 0x22ce <__udivmod64+0x46>
    22a8:	ad 2f       	mov	r26, r29
    22aa:	dc 2f       	mov	r29, r28
    22ac:	cf 2f       	mov	r28, r31
    22ae:	fe 2f       	mov	r31, r30
    22b0:	e9 2d       	mov	r30, r9
    22b2:	98 2c       	mov	r9, r8
    22b4:	89 2e       	mov	r8, r25
    22b6:	98 2f       	mov	r25, r24
    22b8:	87 2f       	mov	r24, r23
    22ba:	76 2f       	mov	r23, r22
    22bc:	65 2f       	mov	r22, r21
    22be:	54 2f       	mov	r21, r20
    22c0:	43 2f       	mov	r20, r19
    22c2:	32 2f       	mov	r19, r18
    22c4:	22 27       	eor	r18, r18
    22c6:	b8 50       	subi	r27, 0x08	; 8
    22c8:	31 f7       	brne	.-52     	; 0x2296 <__udivmod64+0xe>
    22ca:	bf 91       	pop	r27
    22cc:	27 c0       	rjmp	.+78     	; 0x231c <__udivmod64+0x94>
    22ce:	1b 2e       	mov	r1, r27
    22d0:	bf 91       	pop	r27
    22d2:	bb 27       	eor	r27, r27
    22d4:	22 0f       	add	r18, r18
    22d6:	33 1f       	adc	r19, r19
    22d8:	44 1f       	adc	r20, r20
    22da:	55 1f       	adc	r21, r21
    22dc:	66 1f       	adc	r22, r22
    22de:	77 1f       	adc	r23, r23
    22e0:	88 1f       	adc	r24, r24
    22e2:	99 1f       	adc	r25, r25
    22e4:	88 1c       	adc	r8, r8
    22e6:	99 1c       	adc	r9, r9
    22e8:	ee 1f       	adc	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	cc 1f       	adc	r28, r28
    22ee:	dd 1f       	adc	r29, r29
    22f0:	aa 1f       	adc	r26, r26
    22f2:	bb 1f       	adc	r27, r27
    22f4:	8a 14       	cp	r8, r10
    22f6:	9b 04       	cpc	r9, r11
    22f8:	ec 05       	cpc	r30, r12
    22fa:	fd 05       	cpc	r31, r13
    22fc:	ce 05       	cpc	r28, r14
    22fe:	df 05       	cpc	r29, r15
    2300:	a0 07       	cpc	r26, r16
    2302:	b1 07       	cpc	r27, r17
    2304:	48 f0       	brcs	.+18     	; 0x2318 <__udivmod64+0x90>
    2306:	8a 18       	sub	r8, r10
    2308:	9b 08       	sbc	r9, r11
    230a:	ec 09       	sbc	r30, r12
    230c:	fd 09       	sbc	r31, r13
    230e:	ce 09       	sbc	r28, r14
    2310:	df 09       	sbc	r29, r15
    2312:	a0 0b       	sbc	r26, r16
    2314:	b1 0b       	sbc	r27, r17
    2316:	21 60       	ori	r18, 0x01	; 1
    2318:	1a 94       	dec	r1
    231a:	e1 f6       	brne	.-72     	; 0x22d4 <__udivmod64+0x4c>
    231c:	2e f4       	brtc	.+10     	; 0x2328 <__udivmod64+0xa0>
    231e:	94 01       	movw	r18, r8
    2320:	af 01       	movw	r20, r30
    2322:	be 01       	movw	r22, r28
    2324:	cd 01       	movw	r24, r26
    2326:	00 0c       	add	r0, r0
    2328:	08 95       	ret

0000232a <__ashldi3>:
    232a:	0f 93       	push	r16
    232c:	08 30       	cpi	r16, 0x08	; 8
    232e:	90 f0       	brcs	.+36     	; 0x2354 <__ashldi3+0x2a>
    2330:	98 2f       	mov	r25, r24
    2332:	87 2f       	mov	r24, r23
    2334:	76 2f       	mov	r23, r22
    2336:	65 2f       	mov	r22, r21
    2338:	54 2f       	mov	r21, r20
    233a:	43 2f       	mov	r20, r19
    233c:	32 2f       	mov	r19, r18
    233e:	22 27       	eor	r18, r18
    2340:	08 50       	subi	r16, 0x08	; 8
    2342:	f4 cf       	rjmp	.-24     	; 0x232c <__ashldi3+0x2>
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	44 1f       	adc	r20, r20
    234a:	55 1f       	adc	r21, r21
    234c:	66 1f       	adc	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	0a 95       	dec	r16
    2356:	b2 f7       	brpl	.-20     	; 0x2344 <__ashldi3+0x1a>
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <__adddi3>:
    235c:	2a 0d       	add	r18, r10
    235e:	3b 1d       	adc	r19, r11
    2360:	4c 1d       	adc	r20, r12
    2362:	5d 1d       	adc	r21, r13
    2364:	6e 1d       	adc	r22, r14
    2366:	7f 1d       	adc	r23, r15
    2368:	80 1f       	adc	r24, r16
    236a:	91 1f       	adc	r25, r17
    236c:	08 95       	ret

0000236e <__adddi3_s8>:
    236e:	00 24       	eor	r0, r0
    2370:	a7 fd       	sbrc	r26, 7
    2372:	00 94       	com	r0
    2374:	2a 0f       	add	r18, r26
    2376:	30 1d       	adc	r19, r0
    2378:	40 1d       	adc	r20, r0
    237a:	50 1d       	adc	r21, r0
    237c:	60 1d       	adc	r22, r0
    237e:	70 1d       	adc	r23, r0
    2380:	80 1d       	adc	r24, r0
    2382:	90 1d       	adc	r25, r0
    2384:	08 95       	ret

00002386 <__subdi3>:
    2386:	2a 19       	sub	r18, r10
    2388:	3b 09       	sbc	r19, r11
    238a:	4c 09       	sbc	r20, r12
    238c:	5d 09       	sbc	r21, r13
    238e:	6e 09       	sbc	r22, r14
    2390:	7f 09       	sbc	r23, r15
    2392:	80 0b       	sbc	r24, r16
    2394:	91 0b       	sbc	r25, r17
    2396:	08 95       	ret

00002398 <__cmpdi2>:
    2398:	2a 15       	cp	r18, r10
    239a:	3b 05       	cpc	r19, r11
    239c:	4c 05       	cpc	r20, r12
    239e:	5d 05       	cpc	r21, r13
    23a0:	6e 05       	cpc	r22, r14
    23a2:	7f 05       	cpc	r23, r15
    23a4:	80 07       	cpc	r24, r16
    23a6:	91 07       	cpc	r25, r17
    23a8:	08 95       	ret

000023aa <_exit>:
    23aa:	f8 94       	cli

000023ac <__stop_program>:
    23ac:	ff cf       	rjmp	.-2      	; 0x23ac <__stop_program>
